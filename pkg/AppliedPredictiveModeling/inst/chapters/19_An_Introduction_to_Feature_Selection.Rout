
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ################################################################################
> ### R code from Applied Predictive Modeling (2013) by Kuhn and Johnson.
> ### Copyright 2013 Kuhn and Johnson
> ### Web Page: http://www.appliedpredictivemodeling.com
> ### Contact: Max Kuhn (mxkuhn@gmail.com) 
> ###
> ### Chapter 19: An Introduction to Feature Selection
> ###
> ### Required packages: AppliedPredictiveModeling, caret, MASS, corrplot,
> ###                    RColorBrewer, randomForest, kernlab, klaR,
> ###                   
> ###
> ### Data used: The Alzheimer disease data from the AppliedPredictiveModeling 
> ###            package
> ###
> ### Notes: 
> ### 1) This code is provided without warranty.
> ###
> ### 2) This code should help the user reproduce the results in the
> ### text. There will be differences between this code and what is is
> ### the computing section. For example, the computing sections show
> ### how the source functions work (e.g. randomForest() or plsr()),
> ### which were not directly used when creating the book. Also, there may be 
> ### syntax differences that occur over time as packages evolve. These files 
> ### will reflect those changes.
> ###
> ### 3) In some cases, the calculations in the book were run in 
> ### parallel. The sub-processes may reset the random number seed.
> ### Your results may slightly vary.
> ###
> ################################################################################
> 
> 
> 
> ################################################################################
> ### Section 19.6 Case Study: Predicting Cognitive Impairment
> 
> 
> library(AppliedPredictiveModeling)
Loading required package: CORElearn
Loading required package: cluster
Loading required package: rpart
Loading required package: MASS
Loading required package: plyr
Loading required package: reshape2
> data(AlzheimerDisease)
> 
> ## The baseline set of predictors
> bl <- c("Genotype", "age", "tau", "p_tau", "Ab_42", "male")
> 
> ## The set of new assays
> newAssays <- colnames(predictors)
> newAssays <- newAssays[!(newAssays %in% c("Class", bl))]
> 
> ## Decompose the genotype factor into binary dummy variables
> 
> predictors$E2 <- predictors$E3 <- predictors$E4 <- 0
> predictors$E2[grepl("2", predictors$Genotype)] <- 1
> predictors$E3[grepl("3", predictors$Genotype)] <- 1
> predictors$E4[grepl("4", predictors$Genotype)] <- 1
> genotype <-  predictors$Genotype
> 
> ## Partition the data
> library(caret)
Loading required package: foreach
Loading required package: lattice
> set.seed(730)
> split <- createDataPartition(diagnosis, p = .8, list = FALSE)
> 
> adData <- predictors
> adData$Class <- diagnosis
> 
> training <- adData[ split, ]
> testing  <- adData[-split, ]
> 
> predVars <- names(adData)[!(names(adData) %in% c("Class",  "Genotype"))]
> 
> ## This summary function is used to evaluate the models.
> fiveStats <- function(...) c(twoClassSummary(...), defaultSummary(...))
> 
> ## We create the cross-validation files as a list to use with different 
> ## functions
> 
> set.seed(104)
> index <- createMultiFolds(training$Class, times = 5)
> 
> ## The candidate set of the number of predictors to evaluate
> varSeq <- seq(1, length(predVars)-1, by = 2)
> 
> ## We can also use parallel processing to run each resampled RFE
> ## iteration (or resampled model with train()) using different
> ## workers.
> 
> library(doMC)
Loading required package: iterators
Loading required package: multicore

Attaching package: 'multicore'

The following object(s) are masked from 'package:lattice':

    parallel

> registerDoMC(15)
> 
> 
> ## The rfe() function in the caret package is used for recursive feature 
> ## elimiation. We setup control functions for this and train() that use
> ## the same cross-validation folds. The 'ctrl' object will be modifed several
> ## times as we try different models
> 
> ctrl <- rfeControl(method = "repeatedcv", repeats = 5,
+                    saveDetails = TRUE,
+                    index = index)
> 
> fullCtrl <- trainControl(method = "repeatedcv",
+                          repeats = 5,
+                          summaryFunction = fiveStats,
+                          classProbs = TRUE,
+                          index = index)
> 
> ## The correlation matrix of the new data
> predCor <- cor(training[, newAssays])
> 
> library(RColorBrewer)
> cols <- c(rev(brewer.pal(7, "Blues")),
+           brewer.pal(7, "Reds"))
> library(corrplot)
> corrplot(predCor,
+          order = "hclust",
+          tl.pos = "n",addgrid.col = rgb(1,1,1,.01),
+          col = colorRampPalette(cols)(51))
> 
> ## Fit a series of models with the full set of predictors
> set.seed(721)
> rfFull <- train(training[, predVars],
+                 training$Class,
+                 method = "rf",
+                 metric = "ROC",
+                 tuneGrid = data.frame(.mtry = floor(sqrt(length(predVars)))),
+                 ntree = 1000,
+                 trControl = fullCtrl)
Loading required package: pROC
Type 'citation("pROC")' for a citation.

Attaching package: 'pROC'

The following object(s) are masked from 'package:stats':

    cov, smooth, var

Loading required package: class
randomForest 4.6-7
Type rfNews() to see new features/changes/bug fixes.
randomForest 4.6-7
Type rfNews() to see new features/changes/bug fixes.
randomForest 4.6-7
Type rfNews() to see new features/changes/bug fixes.
randomForest 4.6-7
Type rfNews() to see new features/changes/bug fixes.
randomForest 4.6-7
Type rfNews() to see new features/changes/bug fixes.
randomForest 4.6-7
Type rfNews() to see new features/changes/bug fixes.
randomForest 4.6-7
randomForest 4.6-7
Type rfNews() to see new features/changes/bug fixes.
Type rfNews() to see new features/changes/bug fixes.
randomForest 4.6-7
Type rfNews() to see new features/changes/bug fixes.
randomForest 4.6-7
Type rfNews() to see new features/changes/bug fixes.
randomForest 4.6-7
Type rfNews() to see new features/changes/bug fixes.
randomForest 4.6-7
Type rfNews() to see new features/changes/bug fixes.
randomForest 4.6-7
Type rfNews() to see new features/changes/bug fixes.
randomForest 4.6-7
Type rfNews() to see new features/changes/bug fixes.
randomForest 4.6-7
Type rfNews() to see new features/changes/bug fixes.
randomForest 4.6-7
Type rfNews() to see new features/changes/bug fixes.
> rfFull
267 samples
132 predictors
  2 classes: 'Impaired', 'Control' 

No pre-processing
Resampling: Cross-Validation (10 fold, repeated 5 times) 

Summary of sample sizes: 241, 241, 241, 240, 240, 240, ... 

Resampling results

  ROC    Sens   Spec   Accuracy  Kappa  ROC SD  Sens SD  Spec SD  Accuracy SD
  0.893  0.449  0.984  0.837     0.503  0.071   0.176    0.0261   0.0489     
  Kappa SD
  0.185   

Tuning parameter 'mtry' was held constant at a value of 11
 
> 
> set.seed(721)
> ldaFull <- train(training[, predVars],
+                  training$Class,
+                  method = "lda",
+                  metric = "ROC",
+                  ## The 'tol' argument helps lda() know when a matrix is 
+                  ## singular. One of the predictors has values very close to 
+                  ## zero, so we raise the vaue to be smaller than the default
+                  ## value of 1.0e-4.
+                  tol = 1.0e-12,
+                  trControl = fullCtrl)
> ldaFull
267 samples
132 predictors
  2 classes: 'Impaired', 'Control' 

No pre-processing
Resampling: Cross-Validation (10 fold, repeated 5 times) 

Summary of sample sizes: 241, 241, 241, 240, 240, 240, ... 

Resampling results

  ROC    Sens   Spec   Accuracy  Kappa  ROC SD  Sens SD  Spec SD  Accuracy SD
  0.844  0.686  0.829  0.79      0.491  0.0859  0.18     0.0819   0.0659     
  Kappa SD
  0.161   

 
> 
> set.seed(721)
> svmFull <- train(training[, predVars],
+                  training$Class,
+                  method = "svmRadial",
+                  metric = "ROC",
+                  tuneLength = 12,
+                  preProc = c("center", "scale"),
+                  trControl = fullCtrl)
> svmFull
267 samples
132 predictors
  2 classes: 'Impaired', 'Control' 

Pre-processing: centered, scaled 
Resampling: Cross-Validation (10 fold, repeated 5 times) 

Summary of sample sizes: 241, 241, 241, 240, 240, 240, ... 

Resampling results across tuning parameters:

  C     ROC    Sens   Spec   Accuracy  Kappa  ROC SD  Sens SD  Spec SD
  0.25  0.877  0      1      0.727     0      0.0815  0        0      
  0.5   0.877  0.103  0.994  0.75      0.129  0.0813  0.0983   0.0223 
  1     0.884  0.555  0.966  0.853     0.579  0.0806  0.17     0.0447 
  2     0.889  0.645  0.951  0.867     0.635  0.0778  0.169    0.0497 
  4     0.885  0.652  0.935  0.858     0.618  0.0781  0.16     0.0545 
  8     0.884  0.638  0.932  0.852     0.601  0.0777  0.156    0.0552 
  16    0.884  0.638  0.932  0.852     0.601  0.0777  0.156    0.0552 
  32    0.884  0.638  0.932  0.852     0.601  0.0777  0.156    0.0552 
  64    0.884  0.638  0.932  0.852     0.601  0.0777  0.156    0.0552 
  128   0.884  0.638  0.932  0.852     0.601  0.0777  0.156    0.0552 
  256   0.884  0.638  0.932  0.852     0.601  0.0777  0.156    0.0552 
  512   0.884  0.638  0.932  0.852     0.601  0.0777  0.156    0.0552 
  Accuracy SD  Kappa SD
  0.0134       0       
  0.0329       0.126   
  0.0551       0.17    
  0.0582       0.165   
  0.0592       0.163   
  0.0541       0.151   
  0.0541       0.151   
  0.0541       0.151   
  0.0541       0.151   
  0.0541       0.151   
  0.0541       0.151   
  0.0541       0.151   

Tuning parameter 'sigma' was held constant at a value of 0.00662
ROC was used to select the optimal model using  the largest value.
The final values used for the model were C = 2 and sigma = 0.00662. 
> 
> set.seed(721)
> nbFull <- train(training[, predVars],
+                 training$Class,
+                 method = "nb",
+                 metric = "ROC",
+                 trControl = fullCtrl)
> nbFull
267 samples
132 predictors
  2 classes: 'Impaired', 'Control' 

No pre-processing
Resampling: Cross-Validation (10 fold, repeated 5 times) 

Summary of sample sizes: 241, 241, 241, 240, 240, 240, ... 

Resampling results across tuning parameters:

  usekernel  ROC    Sens   Spec   Accuracy  Kappa  ROC SD  Sens SD  Spec SD
  FALSE      0.778  0.644  0.78   0.742     0.395  0.107   0.173    0.0931 
  TRUE       0.798  0.594  0.814  0.753     0.397  0.0952  0.174    0.0971 
  Accuracy SD  Kappa SD
  0.0699       0.155   
  0.0792       0.182   

Tuning parameter 'fL' was held constant at a value of 0
ROC was used to select the optimal model using  the largest value.
The final values used for the model were fL = 0 and usekernel = TRUE. 
> 
> lrFull <- train(training[, predVars],
+                 training$Class,
+                 method = "glm",
+                 metric = "ROC",
+                 trControl = fullCtrl)
Warning messages:
1: glm.fit: algorithm did not converge 
2: glm.fit: fitted probabilities numerically 0 or 1 occurred 
> lrFull
267 samples
132 predictors
  2 classes: 'Impaired', 'Control' 

No pre-processing
Resampling: Cross-Validation (10 fold, repeated 5 times) 

Summary of sample sizes: 241, 241, 241, 240, 240, 240, ... 

Resampling results

  ROC    Sens  Spec   Accuracy  Kappa  ROC SD  Sens SD  Spec SD  Accuracy SD
  0.785  0.67  0.778  0.748     0.417  0.101   0.165    0.11     0.0825     
  Kappa SD
  0.172   

 
> 
> set.seed(721)
> knnFull <- train(training[, predVars],
+                  training$Class,
+                  method = "knn",
+                  metric = "ROC",
+                  tuneLength = 20,
+                  preProc = c("center", "scale"),
+                  trControl = fullCtrl)
> knnFull
267 samples
132 predictors
  2 classes: 'Impaired', 'Control' 

Pre-processing: centered, scaled 
Resampling: Cross-Validation (10 fold, repeated 5 times) 

Summary of sample sizes: 241, 241, 241, 240, 240, 240, ... 

Resampling results across tuning parameters:

  k   ROC    Sens    Spec   Accuracy  Kappa   ROC SD  Sens SD  Spec SD
  5   0.753  0.476   0.928  0.804     0.444   0.142   0.184    0.061  
  7   0.76   0.455   0.94   0.807     0.445   0.136   0.157    0.0585 
  9   0.788  0.394   0.963  0.807     0.418   0.107   0.154    0.0374 
  11  0.794  0.369   0.973  0.808     0.408   0.114   0.149    0.0335 
  13  0.79   0.336   0.966  0.793     0.361   0.14    0.15     0.0367 
  15  0.817  0.328   0.967  0.792     0.353   0.0753  0.152    0.0411 
  17  0.821  0.298   0.979  0.793     0.338   0.0736  0.157    0.0328 
  19  0.837  0.282   0.986  0.793     0.328   0.0704  0.168    0.0253 
  21  0.847  0.265   0.985  0.788     0.307   0.0704  0.169    0.0261 
  23  0.846  0.246   0.984  0.781     0.289   0.0673  0.12     0.03   
  25  0.843  0.232   0.987  0.78      0.276   0.073   0.126    0.0229 
  27  0.846  0.212   0.989  0.776     0.258   0.0669  0.108    0.0216 
  29  0.849  0.196   0.991  0.773     0.242   0.0687  0.103    0.0201 
  31  0.847  0.182   0.988  0.767     0.221   0.0703  0.0962   0.0268 
  33  0.842  0.171   0.989  0.765     0.207   0.0721  0.107    0.0216 
  35  0.843  0.157   0.991  0.762     0.193   0.0728  0.105    0.0201 
  37  0.842  0.138   0.991  0.757     0.169   0.0705  0.102    0.02   
  39  0.837  0.119   0.995  0.755     0.15    0.0731  0.106    0.0158 
  41  0.831  0.0961  0.995  0.749     0.122   0.0738  0.0932   0.0156 
  43  0.82   0.0739  0.996  0.744     0.0939  0.107   0.0854   0.0142 
  Accuracy SD  Kappa SD
  0.0661       0.195   
  0.0581       0.166   
  0.0532       0.172   
  0.0528       0.174   
  0.0517       0.177   
  0.0517       0.178   
  0.0494       0.183   
  0.05         0.191   
  0.0488       0.186   
  0.0391       0.142   
  0.0386       0.15    
  0.0364       0.135   
  0.0342       0.129   
  0.0326       0.119   
  0.0361       0.138   
  0.0352       0.136   
  0.0328       0.128   
  0.0352       0.139   
  0.0312       0.126   
  0.0288       0.116   

ROC was used to select the optimal model using  the largest value.
The final value used for the model was k = 29. 
> 
> ## Now fit the RFE versions. To do this, the 'functions' argument of the rfe()
> ## object is modified to the approproate functions. For model details about 
> ## these functions and their arguments, see 
> ##
> ##   http://caret.r-forge.r-project.org/featureselection.html
> ##
> ## for more information.
> 
> 
> 
> 
> ctrl$functions <- rfFuncs
> ctrl$functions$summary <- fiveStats
> set.seed(721)
> rfRFE <- rfe(training[, predVars],
+              training$Class,
+              sizes = varSeq,
+              metric = "ROC",
+              ntree = 1000,
+              rfeControl = ctrl)
> rfRFE

Recursive feature selection

Outer resampling method: Cross-Validation (10 fold, repeated 5 times) 

Resampling performance over subset size:

 Variables    ROC   Sens   Spec Accuracy  Kappa   ROCSD SensSD  SpecSD
         1 0.8157 0.5593 0.8889   0.7989 0.4641 0.09788 0.2032 0.07901
         3 0.8640 0.6543 0.9156   0.8443 0.5887 0.09471 0.1823 0.06555
         5 0.8897 0.6707 0.9344   0.8623 0.6330 0.08503 0.1649 0.06182
         7 0.8933 0.6632 0.9488   0.8705 0.6475 0.08296 0.1826 0.05994
         9 0.8925 0.6936 0.9538   0.8825 0.6795 0.10398 0.1830 0.04522
        11 0.8945 0.6975 0.9558   0.8848 0.6872 0.10393 0.1686 0.04623
        13 0.9003 0.6732 0.9619   0.8825 0.6768 0.07490 0.1666 0.04121
        15 0.8963 0.6761 0.9599   0.8819 0.6744 0.07623 0.1774 0.04050
        17 0.8966 0.6550 0.9621   0.8775 0.6589 0.07627 0.1858 0.04102
        19 0.8928 0.6486 0.9672   0.8796 0.6609 0.09906 0.1917 0.03848
        21 0.8923 0.6593 0.9704   0.8848 0.6754 0.10157 0.1986 0.03723
        23 0.8989 0.6604 0.9703   0.8850 0.6768 0.07545 0.1958 0.04395
        25 0.8977 0.6396 0.9693   0.8789 0.6591 0.07345 0.1776 0.04117
        27 0.8985 0.6400 0.9703   0.8797 0.6594 0.07411 0.1880 0.03861
        29 0.8968 0.6343 0.9682   0.8765 0.6502 0.07570 0.1959 0.04096
        31 0.8989 0.6196 0.9723   0.8757 0.6442 0.07271 0.1941 0.03880
        33 0.8984 0.6068 0.9681   0.8690 0.6270 0.07426 0.1837 0.04016
        35 0.8967 0.6225 0.9703   0.8750 0.6444 0.07419 0.1852 0.03729
        37 0.8968 0.6068 0.9724   0.8721 0.6353 0.07087 0.1737 0.03877
        39 0.8964 0.6057 0.9692   0.8697 0.6280 0.07285 0.1852 0.03884
        41 0.8985 0.5786 0.9682   0.8616 0.6015 0.07199 0.1877 0.04242
        43 0.8973 0.5664 0.9704   0.8594 0.5945 0.07031 0.1801 0.04236
        45 0.8953 0.5654 0.9682   0.8578 0.5911 0.07316 0.1700 0.04120
        47 0.8972 0.5739 0.9713   0.8623 0.6027 0.07204 0.1797 0.03738
        49 0.8957 0.5696 0.9683   0.8587 0.5929 0.07183 0.1909 0.04474
        51 0.8975 0.5632 0.9703   0.8586 0.5904 0.07050 0.1894 0.04143
        53 0.8983 0.5575 0.9703   0.8571 0.5860 0.07267 0.1775 0.04146
        55 0.8965 0.5550 0.9733   0.8586 0.5893 0.07456 0.1734 0.03614
        57 0.8967 0.5557 0.9734   0.8586 0.5879 0.07175 0.1904 0.03749
        59 0.8950 0.5339 0.9723   0.8520 0.5662 0.07379 0.1865 0.03746
        61 0.8941 0.5254 0.9723   0.8496 0.5583 0.07276 0.1840 0.03746
        63 0.8960 0.5311 0.9733   0.8519 0.5665 0.07079 0.1785 0.04042
        65 0.8966 0.5257 0.9744   0.8511 0.5612 0.07143 0.1914 0.03752
        67 0.8957 0.5275 0.9753   0.8525 0.5664 0.06946 0.1755 0.03800
        69 0.8966 0.5164 0.9775   0.8511 0.5592 0.06988 0.1767 0.03582
        71 0.8952 0.5082 0.9754   0.8473 0.5464 0.07242 0.1884 0.03752
        73 0.8955 0.5057 0.9774   0.8481 0.5476 0.07096 0.1825 0.03131
        75 0.8943 0.5032 0.9784   0.8482 0.5474 0.06997 0.1789 0.02953
        77 0.8943 0.4964 0.9743   0.8435 0.5341 0.07079 0.1826 0.04045
        79 0.8917 0.5050 0.9806   0.8503 0.5524 0.07124 0.1820 0.03057
        81 0.8930 0.5054 0.9754   0.8465 0.5450 0.07025 0.1722 0.03734
        83 0.8949 0.4829 0.9775   0.8421 0.5266 0.06999 0.1748 0.03285
        85 0.8924 0.4971 0.9785   0.8466 0.5420 0.07156 0.1780 0.03116
        87 0.8931 0.4936 0.9805   0.8473 0.5413 0.06854 0.1779 0.02892
        89 0.8952 0.4882 0.9796   0.8450 0.5373 0.06882 0.1593 0.03553
        91 0.8911 0.4832 0.9796   0.8435 0.5315 0.07104 0.1698 0.03406
        93 0.8942 0.4829 0.9827   0.8458 0.5352 0.06878 0.1724 0.02826
        95 0.8948 0.4743 0.9826   0.8435 0.5286 0.07149 0.1560 0.02832
        97 0.8918 0.4714 0.9806   0.8412 0.5210 0.07109 0.1697 0.03237
        99 0.8921 0.4657 0.9816   0.8404 0.5146 0.07166 0.1863 0.03212
       101 0.8906 0.4882 0.9806   0.8458 0.5370 0.07212 0.1750 0.03075
       103 0.8914 0.4743 0.9847   0.8450 0.5278 0.07323 0.1894 0.02571
       105 0.8930 0.4721 0.9806   0.8413 0.5217 0.06975 0.1739 0.03391
       107 0.8914 0.4686 0.9826   0.8420 0.5234 0.07308 0.1522 0.02858
       109 0.8909 0.4636 0.9816   0.8398 0.5140 0.07083 0.1772 0.02864
       111 0.8914 0.4657 0.9826   0.8412 0.5189 0.07304 0.1673 0.02832
       113 0.8911 0.4554 0.9826   0.8383 0.5080 0.07006 0.1737 0.03025
       115 0.8888 0.4357 0.9805   0.8315 0.4840 0.07287 0.1791 0.02916
       117 0.8925 0.4411 0.9836   0.8353 0.4945 0.07036 0.1770 0.02614
       119 0.8940 0.4550 0.9836   0.8389 0.5082 0.06974 0.1787 0.02614
       121 0.8903 0.4689 0.9827   0.8421 0.5216 0.06678 0.1706 0.02826
       123 0.8890 0.4439 0.9836   0.8360 0.4977 0.07496 0.1745 0.02822
       125 0.8927 0.4496 0.9847   0.8383 0.5063 0.06737 0.1627 0.02571
       127 0.8903 0.4525 0.9836   0.8383 0.5072 0.06802 0.1661 0.02614
       129 0.8901 0.4300 0.9836   0.8322 0.4843 0.06854 0.1710 0.02614
       131 0.8906 0.4636 0.9826   0.8404 0.5168 0.06601 0.1699 0.02858
       132 0.8925 0.4268 0.9836   0.8315 0.4814 0.06729 0.1679 0.02614
 AccuracySD KappaSD Selected
    0.07523  0.2078         
    0.06997  0.1951         
    0.06249  0.1683         
    0.06489  0.1841         
    0.05827  0.1731         
    0.05134  0.1508         
    0.05151  0.1527        *
    0.05354  0.1642         
    0.05490  0.1710         
    0.05441  0.1739         
    0.05918  0.1835         
    0.05649  0.1762         
    0.05157  0.1607         
    0.05124  0.1656         
    0.05609  0.1773         
    0.05257  0.1722         
    0.05243  0.1687         
    0.05076  0.1612         
    0.04810  0.1540         
    0.05253  0.1697         
    0.05110  0.1669         
    0.05146  0.1657         
    0.04898  0.1595         
    0.05083  0.1657         
    0.05386  0.1728         
    0.05087  0.1673         
    0.04720  0.1617         
    0.05004  0.1660         
    0.05312  0.1767         
    0.05279  0.1771         
    0.05183  0.1753         
    0.05198  0.1706         
    0.05574  0.1856         
    0.04943  0.1683         
    0.05019  0.1721         
    0.05371  0.1849         
    0.05352  0.1878         
    0.05045  0.1758         
    0.05122  0.1802         
    0.05082  0.1778         
    0.04665  0.1702         
    0.05080  0.1812         
    0.05076  0.1753         
    0.04878  0.1797         
    0.04597  0.1612         
    0.05212  0.1777         
    0.04898  0.1784         
    0.04640  0.1684         
    0.04866  0.1748         
    0.05140  0.1926         
    0.05253  0.1858         
    0.05337  0.1958         
    0.05268  0.1821         
    0.04542  0.1658         
    0.05329  0.1905         
    0.04931  0.1800         
    0.05131  0.1859         
    0.05434  0.1976         
    0.05085  0.1905         
    0.05116  0.1892         
    0.04833  0.1774         
    0.04961  0.1869         
    0.04564  0.1737         
    0.04685  0.1747         
    0.05209  0.1912         
    0.05150  0.1812         
    0.05047  0.1863         

The top 5 variables (out of 13):
   Ab_42, tau, p_tau, VEGF, FAS

> 
> ctrl$functions <- ldaFuncs
> ctrl$functions$summary <- fiveStats
> 
> set.seed(721)
> ldaRFE <- rfe(training[, predVars],
+               training$Class,
+               sizes = varSeq,
+               metric = "ROC",
+               tol = 1.0e-12,
+               rfeControl = ctrl)
> ldaRFE

Recursive feature selection

Outer resampling method: Cross-Validation (10 fold, repeated 5 times) 

Resampling performance over subset size:

 Variables    ROC   Sens   Spec Accuracy  Kappa   ROCSD SensSD  SpecSD
         1 0.8483 0.6621 0.8795   0.8201 0.5385 0.08787 0.2009 0.07003
         3 0.8518 0.6243 0.8899   0.8172 0.5208 0.08546 0.2032 0.06947
         5 0.8509 0.6211 0.8979   0.8216 0.5278 0.08457 0.2038 0.06042
         7 0.8517 0.6154 0.9053   0.8255 0.5341 0.08337 0.2241 0.07148
         9 0.8513 0.6264 0.9043   0.8278 0.5424 0.08574 0.2168 0.06818
        11 0.8566 0.6318 0.9176   0.8391 0.5676 0.08869 0.2132 0.06175
        13 0.8818 0.6736 0.9311   0.8603 0.6256 0.08136 0.2104 0.06389
        15 0.8872 0.6779 0.9311   0.8617 0.6298 0.07954 0.1970 0.06091
        17 0.8900 0.6729 0.9215   0.8532 0.6129 0.07704 0.1885 0.07138
        19 0.8975 0.7050 0.9289   0.8676 0.6494 0.07703 0.1940 0.05814
        21 0.9004 0.7050 0.9299   0.8683 0.6503 0.07364 0.1971 0.05628
        23 0.9067 0.7125 0.9289   0.8698 0.6536 0.07214 0.2127 0.05903
        25 0.9109 0.7193 0.9279   0.8708 0.6589 0.06827 0.2026 0.05995
        27 0.9104 0.7350 0.9271   0.8745 0.6720 0.06855 0.1866 0.05694
        29 0.9128 0.7404 0.9322   0.8798 0.6846 0.06828 0.1834 0.05535
        31 0.9128 0.7346 0.9217   0.8706 0.6632 0.06917 0.1819 0.05352
        33 0.9157 0.7429 0.9279   0.8774 0.6790 0.06941 0.1854 0.05217
        35 0.9163 0.7407 0.9217   0.8721 0.6678 0.06746 0.1848 0.05660
        37 0.9131 0.7436 0.9187   0.8706 0.6654 0.06615 0.1861 0.05812
        39 0.9126 0.7461 0.9187   0.8714 0.6679 0.06456 0.1853 0.05899
        41 0.9149 0.7436 0.9155   0.8684 0.6610 0.06764 0.1843 0.06073
        43 0.9131 0.7486 0.9145   0.8691 0.6630 0.06749 0.1872 0.05956
        45 0.9145 0.7539 0.9094   0.8669 0.6606 0.06560 0.1719 0.05729
        47 0.9109 0.7411 0.9011   0.8572 0.6369 0.06528 0.1747 0.05511
        49 0.9119 0.7471 0.9021   0.8595 0.6426 0.06766 0.1817 0.05519
        51 0.9110 0.7471 0.9031   0.8601 0.6430 0.06583 0.1885 0.05267
        53 0.9098 0.7443 0.9043   0.8601 0.6427 0.06406 0.1934 0.06022
        55 0.9082 0.7300 0.9012   0.8541 0.6261 0.06495 0.1950 0.05753
        57 0.9075 0.7350 0.9054   0.8586 0.6367 0.06390 0.1997 0.06148
        59 0.9056 0.7357 0.9115   0.8632 0.6464 0.06710 0.1977 0.05784
        61 0.9082 0.7357 0.9095   0.8617 0.6448 0.06461 0.1885 0.06244
        63 0.9087 0.7300 0.9065   0.8579 0.6364 0.06374 0.1890 0.06966
        65 0.9073 0.7364 0.9036   0.8573 0.6360 0.06500 0.1967 0.06857
        67 0.9043 0.7411 0.9045   0.8595 0.6429 0.06666 0.1847 0.06917
        69 0.8989 0.7414 0.9005   0.8566 0.6363 0.07321 0.1916 0.07001
        71 0.8989 0.7386 0.9003   0.8557 0.6332 0.07140 0.1973 0.07053
        73 0.8980 0.7332 0.9003   0.8542 0.6301 0.07119 0.1840 0.06976
        75 0.8954 0.7354 0.8953   0.8514 0.6275 0.07105 0.1649 0.07786
        77 0.8931 0.7354 0.8899   0.8475 0.6193 0.07323 0.1623 0.07480
        79 0.8911 0.7461 0.8818   0.8445 0.6163 0.07300 0.1430 0.07030
        81 0.8878 0.7489 0.8848   0.8474 0.6235 0.06987 0.1453 0.07379
        83 0.8856 0.7382 0.8733   0.8360 0.5990 0.06906 0.1441 0.08200
        85 0.8836 0.7350 0.8766   0.8376 0.6003 0.07030 0.1485 0.07922
        87 0.8825 0.7296 0.8766   0.8362 0.5961 0.07112 0.1482 0.07726
        89 0.8831 0.7189 0.8726   0.8304 0.5801 0.07049 0.1561 0.07203
        91 0.8813 0.7293 0.8694   0.8310 0.5855 0.07322 0.1527 0.07665
        93 0.8778 0.7236 0.8755   0.8340 0.5893 0.07479 0.1585 0.07555
        95 0.8749 0.7339 0.8745   0.8362 0.5961 0.09342 0.1570 0.07480
        97 0.8827 0.7282 0.8743   0.8345 0.5922 0.07452 0.1570 0.07919
        99 0.8822 0.7371 0.8733   0.8362 0.5959 0.07307 0.1522 0.06643
       101 0.8843 0.7196 0.8765   0.8339 0.5853 0.07526 0.1620 0.06258
       103 0.8808 0.7164 0.8693   0.8278 0.5714 0.07495 0.1717 0.06534
       105 0.8787 0.7318 0.8672   0.8301 0.5805 0.07423 0.1651 0.06133
       107 0.8746 0.7096 0.8682   0.8249 0.5651 0.07805 0.1584 0.06424
       109 0.8679 0.7036 0.8673   0.8227 0.5589 0.09389 0.1616 0.06383
       111 0.8688 0.7064 0.8702   0.8257 0.5653 0.07951 0.1644 0.06510
       113 0.8635 0.7182 0.8652   0.8251 0.5678 0.08714 0.1687 0.06935
       115 0.8623 0.6993 0.8577   0.8145 0.5415 0.09186 0.1710 0.06934
       117 0.8586 0.6968 0.8516   0.8093 0.5307 0.09189 0.1724 0.06903
       119 0.8570 0.6979 0.8518   0.8099 0.5323 0.09064 0.1825 0.07745
       121 0.8581 0.7093 0.8508   0.8121 0.5403 0.08832 0.1768 0.07823
       123 0.8559 0.6957 0.8477   0.8064 0.5241 0.08573 0.1852 0.07355
       125 0.8507 0.6907 0.8404   0.7996 0.5096 0.09223 0.1859 0.07252
       127 0.8439 0.6771 0.8405   0.7959 0.4979 0.08763 0.1894 0.07237
       129 0.8418 0.6739 0.8313   0.7883 0.4827 0.08636 0.1879 0.07310
       131 0.8439 0.6857 0.8294   0.7900 0.4910 0.08593 0.1803 0.08189
       132 0.8439 0.6857 0.8294   0.7900 0.4910 0.08593 0.1803 0.08189
 AccuracySD KappaSD Selected
    0.06212  0.1693         
    0.06092  0.1694         
    0.05878  0.1723         
    0.07356  0.2082         
    0.06843  0.1960         
    0.06755  0.1931         
    0.07173  0.1998         
    0.06132  0.1738         
    0.06709  0.1779         
    0.06469  0.1773         
    0.05814  0.1630         
    0.06293  0.1778         
    0.06107  0.1678         
    0.05941  0.1600         
    0.05484  0.1485         
    0.05414  0.1480         
    0.05343  0.1499         
    0.05565  0.1534        *
    0.05921  0.1614         
    0.05946  0.1604         
    0.05870  0.1577         
    0.05789  0.1585         
    0.05406  0.1445         
    0.05679  0.1521         
    0.05793  0.1556         
    0.05796  0.1586         
    0.05942  0.1618         
    0.06066  0.1687         
    0.06102  0.1704         
    0.05765  0.1624         
    0.05590  0.1549         
    0.05753  0.1524         
    0.06565  0.1722         
    0.06434  0.1671         
    0.06391  0.1670         
    0.06698  0.1765         
    0.06320  0.1639         
    0.06074  0.1485         
    0.06176  0.1516         
    0.05911  0.1417         
    0.06292  0.1510         
    0.06461  0.1510         
    0.05977  0.1408         
    0.06272  0.1476         
    0.06231  0.1524         
    0.06917  0.1646         
    0.06792  0.1640         
    0.06741  0.1630         
    0.07049  0.1658         
    0.06348  0.1552         
    0.06082  0.1547         
    0.06131  0.1588         
    0.05867  0.1505         
    0.05767  0.1460         
    0.06143  0.1582         
    0.05859  0.1501         
    0.06193  0.1546         
    0.06218  0.1573         
    0.06459  0.1642         
    0.07084  0.1784         
    0.06828  0.1704         
    0.07060  0.1793         
    0.06999  0.1790         
    0.06957  0.1782         
    0.07027  0.1782         
    0.06589  0.1611         
    0.06589  0.1611         

The top 5 variables (out of 35):
   Ab_42, tau, p_tau, MMP10, MIF

> 
> ctrl$functions <- nbFuncs
> ctrl$functions$summary <- fiveStats
> set.seed(721)
> nbRFE <- rfe(training[, predVars],
+               training$Class,
+               sizes = varSeq,
+               metric = "ROC",
+               rfeControl = ctrl)
> nbRFE

Recursive feature selection

Outer resampling method: Cross-Validation (10 fold, repeated 5 times) 

Resampling performance over subset size:

 Variables    ROC   Sens   Spec Accuracy  Kappa   ROCSD SensSD  SpecSD
         1 0.8219 0.6286 0.8806   0.8112 0.5133 0.09390 0.1858 0.07246
         3 0.8260 0.6171 0.8537   0.7886 0.4655 0.08952 0.1996 0.08506
         5 0.8176 0.6200 0.8374   0.7774 0.4472 0.08568 0.1868 0.08760
         7 0.8171 0.6107 0.8355   0.7737 0.4368 0.08333 0.1784 0.08128
         9 0.8152 0.6093 0.8274   0.7672 0.4248 0.08766 0.1798 0.08402
        11 0.8197 0.6143 0.8325   0.7723 0.4370 0.08881 0.1644 0.08098
        13 0.8264 0.6532 0.8348   0.7845 0.4720 0.08559 0.1782 0.08413
        15 0.8274 0.6582 0.8325   0.7844 0.4725 0.08184 0.1732 0.07366
        17 0.8318 0.6807 0.8387   0.7950 0.5000 0.08452 0.1690 0.07622
        19 0.8314 0.6671 0.8437   0.7948 0.4955 0.08804 0.1804 0.08144
        21 0.8294 0.6589 0.8426   0.7918 0.4866 0.08704 0.1847 0.08180
        23 0.8275 0.6457 0.8457   0.7904 0.4788 0.09091 0.1952 0.08045
        25 0.8280 0.6436 0.8404   0.7859 0.4697 0.09197 0.1937 0.07888
        27 0.8307 0.6436 0.8456   0.7896 0.4766 0.09182 0.1942 0.07845
        29 0.8291 0.6300 0.8446   0.7852 0.4643 0.09237 0.1952 0.08216
        31 0.8229 0.6182 0.8416   0.7799 0.4508 0.09497 0.1859 0.08083
        33 0.8222 0.6182 0.8386   0.7777 0.4481 0.08826 0.1859 0.08690
        35 0.8185 0.6264 0.8345   0.7769 0.4487 0.09244 0.1806 0.08364
        37 0.8165 0.6243 0.8344   0.7761 0.4454 0.09084 0.1894 0.08191
        39 0.8147 0.6214 0.8324   0.7740 0.4414 0.09174 0.1928 0.08403
        41 0.8113 0.6139 0.8244   0.7659 0.4251 0.09145 0.1896 0.08912
        43 0.8106 0.6111 0.8264   0.7667 0.4251 0.08928 0.1869 0.08561
        45 0.8078 0.6025 0.8212   0.7606 0.4105 0.09236 0.1962 0.08997
        47 0.8031 0.5971 0.8191   0.7576 0.4035 0.09325 0.1960 0.09122
        49 0.8006 0.6021 0.8169   0.7574 0.4048 0.09371 0.1918 0.08948
        51 0.7942 0.5993 0.8096   0.7514 0.3923 0.09367 0.1954 0.08918
        53 0.7942 0.6021 0.8067   0.7500 0.3922 0.09352 0.1929 0.09279
        55 0.7924 0.6025 0.8047   0.7486 0.3897 0.09154 0.1962 0.09277
        57 0.7910 0.5968 0.8037   0.7463 0.3835 0.09229 0.1991 0.09369
        59 0.7905 0.5939 0.8016   0.7441 0.3782 0.09206 0.1984 0.09330
        61 0.7885 0.6054 0.8005   0.7463 0.3872 0.09605 0.1925 0.09374
        63 0.7856 0.6025 0.8035   0.7477 0.3882 0.09639 0.1929 0.09137
        65 0.7853 0.5993 0.7953   0.7409 0.3750 0.09680 0.1954 0.09268
        67 0.7839 0.5996 0.7984   0.7432 0.3796 0.09714 0.1934 0.09261
        69 0.7824 0.5943 0.7994   0.7425 0.3760 0.09728 0.1898 0.09267
        71 0.7787 0.5996 0.7973   0.7425 0.3792 0.10154 0.1845 0.09806
        73 0.7791 0.6025 0.7973   0.7432 0.3809 0.10094 0.1851 0.09763
        75 0.7794 0.5996 0.7942   0.7402 0.3745 0.10232 0.1901 0.09662
        77 0.7792 0.6018 0.7973   0.7432 0.3811 0.10076 0.1810 0.09632
        79 0.7786 0.6100 0.7972   0.7453 0.3875 0.10145 0.1815 0.09363
        81 0.7783 0.6150 0.7973   0.7469 0.3928 0.10362 0.1801 0.09841
        83 0.7785 0.6100 0.7953   0.7440 0.3859 0.10308 0.1833 0.09937
        85 0.7799 0.6043 0.7953   0.7424 0.3807 0.10384 0.1844 0.09601
        87 0.7798 0.6096 0.7984   0.7462 0.3895 0.10427 0.1826 0.09587
        89 0.7796 0.6096 0.7953   0.7439 0.3859 0.10255 0.1826 0.09853
        91 0.7803 0.6043 0.7974   0.7439 0.3838 0.10025 0.1850 0.09901
        93 0.7813 0.6071 0.8025   0.7484 0.3926 0.09988 0.1861 0.09907
        95 0.7819 0.6046 0.8014   0.7469 0.3886 0.09946 0.1900 0.09792
        97 0.7841 0.5989 0.8025   0.7462 0.3852 0.09933 0.1877 0.09702
        99 0.7844 0.5986 0.8025   0.7462 0.3862 0.09856 0.1808 0.09932
       101 0.7856 0.5982 0.8066   0.7492 0.3906 0.09764 0.1842 0.09638
       103 0.7865 0.6007 0.8066   0.7499 0.3934 0.09868 0.1808 0.09638
       105 0.7880 0.6032 0.8097   0.7529 0.3997 0.09868 0.1785 0.09609
       107 0.7881 0.5982 0.8046   0.7476 0.3880 0.09737 0.1876 0.09781
       109 0.7909 0.5954 0.8026   0.7454 0.3825 0.09565 0.1869 0.09620
       111 0.7898 0.5929 0.8036   0.7454 0.3814 0.09557 0.1885 0.09590
       113 0.7914 0.5954 0.8057   0.7476 0.3865 0.09535 0.1864 0.09604
       115 0.7939 0.5982 0.8108   0.7522 0.3961 0.09499 0.1826 0.09499
       117 0.7969 0.5986 0.8118   0.7530 0.3980 0.09534 0.1855 0.09748
       119 0.7948 0.6039 0.8108   0.7537 0.4019 0.09458 0.1827 0.09978
       121 0.7962 0.5986 0.8118   0.7529 0.3990 0.09327 0.1725 0.09878
       123 0.7993 0.5986 0.8108   0.7522 0.3978 0.09368 0.1725 0.09916
       125 0.7999 0.6039 0.8108   0.7537 0.4020 0.09421 0.1733 0.09732
       127 0.7987 0.6014 0.8118   0.7538 0.4014 0.09424 0.1683 0.09737
       129 0.7968 0.6014 0.8108   0.7530 0.4001 0.09664 0.1683 0.09732
       131 0.7980 0.5936 0.8139   0.7530 0.3966 0.09522 0.1742 0.09706
       132 0.7980 0.5936 0.8139   0.7530 0.3966 0.09522 0.1742 0.09706
 AccuracySD KappaSD Selected
    0.05981  0.1591         
    0.07148  0.1822         
    0.06939  0.1721         
    0.06715  0.1668         
    0.06916  0.1679         
    0.06712  0.1629         
    0.07135  0.1725         
    0.07058  0.1762         
    0.06595  0.1587        *
    0.07284  0.1747         
    0.07193  0.1740         
    0.07296  0.1821         
    0.07436  0.1849         
    0.07286  0.1808         
    0.07526  0.1843         
    0.07277  0.1781         
    0.07880  0.1876         
    0.07058  0.1718         
    0.07097  0.1773         
    0.08000  0.1952         
    0.07929  0.1885         
    0.07735  0.1855         
    0.07910  0.1935         
    0.08068  0.1953         
    0.07778  0.1875         
    0.07609  0.1850         
    0.07929  0.1904         
    0.08009  0.1924         
    0.08398  0.2005         
    0.08018  0.1921         
    0.08105  0.1910         
    0.07906  0.1878         
    0.07920  0.1881         
    0.08124  0.1907         
    0.07596  0.1770         
    0.07690  0.1735         
    0.07299  0.1650         
    0.07609  0.1751         
    0.07310  0.1658         
    0.07230  0.1677         
    0.07457  0.1679         
    0.07593  0.1697         
    0.07698  0.1750         
    0.07872  0.1803         
    0.07928  0.1801         
    0.07925  0.1805         
    0.07853  0.1784         
    0.08007  0.1844         
    0.08021  0.1863         
    0.08105  0.1845         
    0.08156  0.1900         
    0.08351  0.1923         
    0.08267  0.1898         
    0.08395  0.1959         
    0.08036  0.1882         
    0.08116  0.1892         
    0.08057  0.1877         
    0.08211  0.1924         
    0.08577  0.2000         
    0.08526  0.1957         
    0.08264  0.1883         
    0.08220  0.1868         
    0.08051  0.1835         
    0.07932  0.1797         
    0.07973  0.1809         
    0.07924  0.1821         
    0.07924  0.1821         

The top 5 variables (out of 17):
   Ab_42, tau, p_tau, MMP10, MIF

> 
> ## Here, the caretFuncs list allows for a model to be tuned at each iteration 
> ## of feature seleciton.
> 
> ctrl$functions <- caretFuncs
> ctrl$functions$summary <- fiveStats
> 
> ## This options tells train() to run it's model tuning
> ## sequentially. Otherwise, there would be parallel processing at two
> ## levels, which is possible but requires W^2 workers. On our machine,
> ## it was more efficient to only run the RFE process in parallel. 
> 
> cvCtrl <- trainControl(method = "cv",
+                        verboseIter = FALSE,
+                        classProbs = TRUE,
+                        allowParallel = FALSE)
> 
> set.seed(721)
> svmRFE <- rfe(training[, predVars],
+               training$Class,
+               sizes = varSeq,
+               rfeControl = ctrl,
+               metric = "ROC",
+               ## Now arguments to train() are used.
+               method = "svmRadial",
+               tuneLength = 12,
+               preProc = c("center", "scale"),
+               trControl = cvCtrl)
> svmRFE

Recursive feature selection

Outer resampling method: Cross-Validation (10 fold, repeated 5 times) 

Resampling performance over subset size:

 Variables    ROC     Sens   Spec Accuracy     Kappa   ROCSD  SensSD  SpecSD
         1 0.5898 0.000000 0.9970   0.7245 -0.003684 0.09509 0.00000 0.02121
         3 0.6046 0.002500 0.9878   0.7185 -0.012419 0.09566 0.01768 0.03459
         5 0.5737 0.002500 0.9916   0.7215 -0.006312 0.08826 0.01768 0.05248
         7 0.5866 0.002857 0.9959   0.7245 -0.001855 0.08814 0.02020 0.01407
         9 0.5919 0.000000 0.9959   0.7237 -0.005659 0.09154 0.00000 0.01407
        11 0.6035 0.000000 0.9959   0.7237 -0.005595 0.08793 0.00000 0.01407
        13 0.5843 0.000000 0.9979   0.7252 -0.002829 0.08504 0.00000 0.01016
        15 0.6055 0.000000 0.9929   0.7216 -0.008891 0.09291 0.00000 0.03040
        17 0.5847 0.000000 1.0000   0.7267  0.000000 0.10456 0.00000 0.00000
        19 0.6005 0.000000 1.0000   0.7267  0.000000 0.08166 0.00000 0.00000
        21 0.6265 0.000000 1.0000   0.7267  0.000000 0.08733 0.00000 0.00000
        23 0.6286 0.007500 0.9794   0.7142 -0.013147 0.10072 0.03920 0.08455
        25 0.6370 0.015000 0.9787   0.7157 -0.007200 0.10632 0.06507 0.07262
        27 0.6273 0.022143 0.9815   0.7192  0.004293 0.10772 0.05722 0.04019
        29 0.6457 0.041071 0.9795   0.7231  0.024614 0.10294 0.09086 0.04145
        31 0.6540 0.062500 0.9569   0.7126  0.023370 0.09591 0.11185 0.07876
        33 0.6854 0.064286 0.9518   0.7097  0.016900 0.10580 0.12642 0.08596
        35 0.7162 0.268214 0.9084   0.7336  0.197799 0.10864 0.17979 0.07127
        37 0.7130 0.285714 0.8981   0.7314  0.206431 0.11250 0.16513 0.07773
        39 0.7313 0.351429 0.9092   0.7566  0.294661 0.11016 0.16566 0.07541
        41 0.7335 0.287857 0.9185   0.7459  0.238104 0.09929 0.16519 0.07203
        43 0.7657 0.391429 0.9189   0.7749  0.348253 0.09078 0.18189 0.07278
        45 0.7770 0.400000 0.9199   0.7780  0.360790 0.08809 0.15420 0.05897
        47 0.7956 0.425714 0.9175   0.7833  0.380244 0.08444 0.17269 0.06453
        49 0.8033 0.424286 0.9219   0.7861  0.387096 0.08182 0.15872 0.06369
        51 0.8038 0.456786 0.9282   0.7990  0.428139 0.08266 0.16611 0.06004
        53 0.7939 0.442500 0.9292   0.7960  0.415454 0.08134 0.16919 0.06007
        55 0.7769 0.396071 0.9239   0.7794  0.359664 0.10299 0.17093 0.07051
        57 0.7754 0.414643 0.9198   0.7817  0.374738 0.09798 0.15531 0.06529
        59 0.7831 0.390357 0.9139   0.7705  0.342212 0.08352 0.14778 0.07318
        61 0.7744 0.377143 0.9167   0.7688  0.323867 0.08088 0.19643 0.06302
        63 0.7770 0.350357 0.9239   0.7668  0.312599 0.09052 0.16638 0.07065
        65 0.7748 0.360000 0.9308   0.7748  0.331558 0.09030 0.17213 0.05747
        67 0.7704 0.363571 0.9156   0.7644  0.313952 0.09033 0.17192 0.07552
        69 0.7702 0.346786 0.9145   0.7592  0.298390 0.09423 0.15784 0.07879
        71 0.7720 0.362857 0.9187   0.7668  0.320137 0.09411 0.16312 0.07309
        73 0.7735 0.381429 0.9127   0.7675  0.325999 0.10557 0.19157 0.06601
        75 0.7808 0.392857 0.9105   0.7690  0.338127 0.10375 0.16231 0.07005
        77 0.7869 0.456429 0.9024   0.7804  0.390731 0.08001 0.16506 0.07089
        79 0.7821 0.481786 0.9148   0.7963  0.430550 0.10813 0.18202 0.06265
        81 0.7886 0.411429 0.9157   0.7777  0.361752 0.09866 0.17519 0.06487
        83 0.7913 0.449286 0.9003   0.7770  0.377386 0.09649 0.17793 0.05948
        85 0.8040 0.475714 0.9114   0.7922  0.421959 0.10532 0.15687 0.06306
        87 0.8141 0.488214 0.9167   0.7997  0.441532 0.10477 0.14917 0.05741
        89 0.8260 0.498214 0.9065   0.7947  0.436307 0.07514 0.14898 0.05702
        91 0.8256 0.467143 0.9077   0.7870  0.407664 0.06970 0.15731 0.06718
        93 0.8243 0.486429 0.9159   0.7983  0.438848 0.07924 0.15283 0.05863
        95 0.8197 0.469286 0.9148   0.7930  0.421459 0.07946 0.15221 0.06934
        97 0.8216 0.475714 0.9117   0.7922  0.423342 0.08016 0.14587 0.06542
        99 0.8194 0.489286 0.9149   0.7982  0.439777 0.08163 0.16418 0.06610
       101 0.8211 0.475000 0.9209   0.7989  0.436019 0.07912 0.15135 0.06383
       103 0.8260 0.518929 0.9168   0.8078  0.468994 0.08185 0.16632 0.06098
       105 0.8199 0.497857 0.9117   0.7982  0.444208 0.08199 0.14284 0.06384
       107 0.8233 0.527500 0.9117   0.8063  0.471589 0.08158 0.14553 0.06029
       109 0.8236 0.535714 0.9129   0.8095  0.481185 0.08393 0.15668 0.06686
       111 0.8196 0.504286 0.9127   0.8012  0.451755 0.08329 0.16148 0.06877
       113 0.8170 0.510000 0.9157   0.8049  0.460253 0.08058 0.15968 0.05996
       115 0.8128 0.503929 0.9149   0.8026  0.451551 0.08415 0.17412 0.06550
       117 0.8130 0.504286 0.9118   0.8003  0.449201 0.08386 0.16148 0.06347
       119 0.8142 0.501429 0.9126   0.8002  0.448079 0.08446 0.16198 0.06705
       121 0.8219 0.510357 0.9178   0.8063  0.461832 0.08508 0.17385 0.06096
       123 0.8232 0.511071 0.9199   0.8078  0.465916 0.08688 0.17380 0.06461
       125 0.8822 0.614286 0.9508   0.8588  0.611507 0.08048 0.14236 0.05118
       127 0.8909 0.660714 0.9548   0.8744  0.656274 0.08050 0.16219 0.04713
       129 0.8877 0.665714 0.9475   0.8706  0.650606 0.07986 0.16175 0.05849
       131 0.8881 0.642500 0.9486   0.8648  0.630610 0.07761 0.16301 0.04981
       132 0.8869 0.634286 0.9475   0.8617  0.622747 0.07774 0.16010 0.05355
 AccuracySD KappaSD Selected
    0.01905 0.02605         
    0.02612 0.04979         
    0.03731 0.03571         
    0.01578 0.02391         
    0.01521 0.01939         
    0.01755 0.01917         
    0.01441 0.01401         
    0.02677 0.03671         
    0.01339 0.00000         
    0.01339 0.00000         
    0.01339 0.00000         
    0.05604 0.05903         
    0.04418 0.05531         
    0.02343 0.05472         
    0.02228 0.07889         
    0.04241 0.08659         
    0.04195 0.07919         
    0.05134 0.17192         
    0.05187 0.15801         
    0.06398 0.18565         
    0.06086 0.18126         
    0.06880 0.20652         
    0.06483 0.19013         
    0.06044 0.18444         
    0.05909 0.17704         
    0.06676 0.19657         
    0.06826 0.20303         
    0.05674 0.17456         
    0.05947 0.17332         
    0.05720 0.15968         
    0.05583 0.19174         
    0.05580 0.16839         
    0.05776 0.18404         
    0.05620 0.16523         
    0.06265 0.16843         
    0.06207 0.17172         
    0.06453 0.19810         
    0.05656 0.16407         
    0.06666 0.18281         
    0.06417 0.17948         
    0.05529 0.16778         
    0.06340 0.18462         
    0.05832 0.16116         
    0.05177 0.14885         
    0.05818 0.15998         
    0.05324 0.14954         
    0.05990 0.16782         
    0.05623 0.15264         
    0.05839 0.15585         
    0.06454 0.18177         
    0.05582 0.15293         
    0.05676 0.16446         
    0.05293 0.14212         
    0.05492 0.14966         
    0.06133 0.16440         
    0.06419 0.17410         
    0.05611 0.16086         
    0.05850 0.17032         
    0.06000 0.16760         
    0.05902 0.16392         
    0.05767 0.16840         
    0.05650 0.16246         
    0.05702 0.15701         
    0.05637 0.15869        *
    0.06341 0.17029         
    0.05655 0.15913         
    0.06175 0.17022         

The top 5 variables (out of 127):
   Ab_42, tau, p_tau, MMP10, MIF

> 
> ctrl$functions <- lrFuncs
> ctrl$functions$summary <- fiveStats
> 
> set.seed(721)
> lrRFE <- rfe(training[, predVars],
+                training$Class,
+                sizes = varSeq,
+                metric = "ROC",
+                rfeControl = ctrl)
> lrRFE

Recursive feature selection

Outer resampling method: Cross-Validation (10 fold, repeated 5 times) 

Resampling performance over subset size:

 Variables    ROC   Sens   Spec Accuracy  Kappa   ROCSD SensSD  SpecSD
         1 0.7600 0.2621 0.9620   0.7704 0.2550 0.13224 0.2454 0.05035
         3 0.7787 0.3746 0.9416   0.7859 0.3438 0.13636 0.2780 0.06164
         5 0.8002 0.4682 0.9425   0.8122 0.4384 0.14821 0.2933 0.05908
         7 0.8300 0.5364 0.9354   0.8257 0.5035 0.12810 0.2533 0.06264
         9 0.8497 0.5896 0.9301   0.8368 0.5507 0.10148 0.2195 0.06761
        11 0.8550 0.6093 0.9249   0.8382 0.5608 0.09568 0.1991 0.06096
        13 0.8571 0.6225 0.9287   0.8449 0.5805 0.09524 0.1788 0.05467
        15 0.8543 0.6182 0.9175   0.8354 0.5580 0.10808 0.1966 0.05916
        17 0.8529 0.6343 0.9103   0.8346 0.5636 0.10130 0.1763 0.06267
        19 0.8562 0.6368 0.9102   0.8354 0.5637 0.10051 0.1911 0.06259
        21 0.8515 0.6307 0.8991   0.8256 0.5411 0.10679 0.1894 0.06230
        23 0.8473 0.6368 0.8847   0.8167 0.5260 0.10444 0.1939 0.06669
        25 0.8523 0.6464 0.8858   0.8204 0.5371 0.10208 0.1812 0.06755
        27 0.8448 0.6525 0.8795   0.8175 0.5326 0.10287 0.1954 0.07052
        29 0.8369 0.6671 0.8744   0.8175 0.5374 0.11255 0.2006 0.08023
        31 0.8172 0.6604 0.8599   0.8054 0.5127 0.14429 0.1846 0.07654
        33 0.8239 0.6746 0.8488   0.8010 0.5081 0.10737 0.1804 0.07347
        35 0.7846 0.6850 0.8312   0.7911 0.4942 0.14152 0.1684 0.07504
        37 0.7456 0.6604 0.8233   0.7785 0.4635 0.15954 0.1769 0.08068
        39 0.7291 0.6618 0.8167   0.7747 0.4550 0.15947 0.1922 0.08490
        41 0.7472 0.6654 0.8207   0.7785 0.4632 0.13699 0.1734 0.07679
        43 0.7364 0.6468 0.8173   0.7706 0.4423 0.14810 0.1897 0.07950
        45 0.7636 0.6746 0.8003   0.7657 0.4450 0.10668 0.1683 0.09067
        47 0.7619 0.6875 0.8011   0.7698 0.4581 0.12478 0.1669 0.09794
        49 0.7720 0.6782 0.8156   0.7776 0.4673 0.11553 0.1853 0.09389
        51 0.7819 0.7029 0.8099   0.7800 0.4813 0.11128 0.1693 0.09576
        53 0.7836 0.6939 0.8213   0.7860 0.4916 0.11668 0.1542 0.09829
        55 0.7984 0.7000 0.8199   0.7868 0.4945 0.08453 0.1478 0.09543
        57 0.7741 0.6768 0.8162   0.7773 0.4698 0.12412 0.1706 0.10138
        59 0.7795 0.6657 0.8149   0.7732 0.4593 0.12299 0.1737 0.10499
        61 0.7921 0.6743 0.8200   0.7794 0.4719 0.10119 0.1800 0.09761
        63 0.7885 0.6757 0.8045   0.7689 0.4523 0.10087 0.1745 0.09097
        65 0.7939 0.6757 0.8136   0.7755 0.4655 0.10055 0.1833 0.10296
        67 0.7955 0.6482 0.8107   0.7658 0.4383 0.09315 0.1861 0.09886
        69 0.7980 0.6789 0.8067   0.7712 0.4595 0.10358 0.1689 0.10044
        71 0.7881 0.6814 0.7965   0.7646 0.4510 0.10688 0.1861 0.11684
        73 0.7837 0.6575 0.7965   0.7577 0.4280 0.10418 0.1883 0.10651
        75 0.7841 0.6668 0.7923   0.7570 0.4286 0.10367 0.1970 0.10784
        77 0.7805 0.6629 0.7982   0.7606 0.4351 0.10579 0.1809 0.10965
        79 0.7812 0.6646 0.7995   0.7621 0.4396 0.10462 0.1780 0.11074
        81 0.7837 0.6621 0.7933   0.7567 0.4299 0.09616 0.1793 0.11313
        83 0.7837 0.6486 0.7921   0.7522 0.4153 0.09257 0.1870 0.10980
        85 0.7843 0.6521 0.7899   0.7516 0.4171 0.09711 0.1700 0.10981
        87 0.7869 0.6321 0.7891   0.7455 0.3991 0.08773 0.1852 0.11503
        89 0.7912 0.6650 0.7858   0.7521 0.4238 0.08960 0.1574 0.11434
        91 0.7962 0.6739 0.7892   0.7568 0.4359 0.08569 0.1590 0.11937
        93 0.7918 0.6875 0.7879   0.7597 0.4412 0.08811 0.1699 0.10327
        95 0.7920 0.6639 0.7840   0.7500 0.4168 0.08550 0.1701 0.10505
        97 0.7834 0.6604 0.7801   0.7463 0.4109 0.09253 0.1638 0.11182
        99 0.7832 0.6657 0.7788   0.7469 0.4118 0.08899 0.1731 0.10541
       101 0.7851 0.6650 0.7808   0.7484 0.4165 0.09378 0.1626 0.11051
       103 0.7876 0.6625 0.7810   0.7477 0.4141 0.09109 0.1674 0.11118
       105 0.7872 0.6700 0.7893   0.7559 0.4325 0.09882 0.1587 0.11435
       107 0.7869 0.6721 0.7863   0.7545 0.4299 0.10293 0.1656 0.11308
       109 0.7845 0.6557 0.7862   0.7500 0.4164 0.11155 0.1663 0.11528
       111 0.7831 0.6593 0.7777   0.7448 0.4091 0.10095 0.1721 0.11793
       113 0.7830 0.6621 0.7809   0.7478 0.4138 0.09778 0.1723 0.11104
       115 0.7841 0.6618 0.7809   0.7477 0.4133 0.09882 0.1674 0.10847
       117 0.7827 0.6696 0.7840   0.7522 0.4248 0.10605 0.1594 0.11009
       119 0.7831 0.6589 0.7873   0.7516 0.4181 0.10265 0.1746 0.10598
       121 0.7848 0.6668 0.7821   0.7501 0.4189 0.10165 0.1675 0.10689
       123 0.7839 0.6675 0.7809   0.7493 0.4184 0.10471 0.1686 0.10975
       125 0.7822 0.6586 0.7800   0.7463 0.4114 0.10507 0.1634 0.11153
       127 0.7818 0.6671 0.7800   0.7487 0.4175 0.10490 0.1649 0.10849
       129 0.7825 0.6693 0.7830   0.7515 0.4228 0.10320 0.1659 0.10898
       131 0.7846 0.6696 0.7809   0.7501 0.4203 0.10057 0.1652 0.10877
       132 0.7846 0.6696 0.7809   0.7501 0.4203 0.10057 0.1652 0.10877
 AccuracySD KappaSD Selected
    0.06318  0.2505         
    0.07840  0.2842         
    0.08457  0.2957         
    0.08638  0.2707         
    0.08088  0.2311         
    0.06923  0.1950         
    0.06427  0.1783        *
    0.07073  0.1920         
    0.06759  0.1777         
    0.07115  0.1928         
    0.06185  0.1705         
    0.07372  0.1954         
    0.06929  0.1807         
    0.07702  0.1989         
    0.07706  0.1966         
    0.07755  0.1940         
    0.06884  0.1716         
    0.07286  0.1745         
    0.07804  0.1890         
    0.07802  0.1886         
    0.06286  0.1559         
    0.06975  0.1706         
    0.05611  0.1242         
    0.06936  0.1500         
    0.06754  0.1534         
    0.06433  0.1383         
    0.06896  0.1485         
    0.06433  0.1343         
    0.07786  0.1662         
    0.07941  0.1690         
    0.08244  0.1828         
    0.07797  0.1701         
    0.08497  0.1842         
    0.08115  0.1825         
    0.07590  0.1660         
    0.09107  0.1922         
    0.07874  0.1724         
    0.07590  0.1653         
    0.07396  0.1533         
    0.08108  0.1717         
    0.08430  0.1739         
    0.08129  0.1744         
    0.07765  0.1557         
    0.08444  0.1799         
    0.07797  0.1527         
    0.08260  0.1600         
    0.06957  0.1456         
    0.06695  0.1345         
    0.07209  0.1415         
    0.07015  0.1451         
    0.08060  0.1631         
    0.07867  0.1617         
    0.08121  0.1626         
    0.08352  0.1682         
    0.08271  0.1679         
    0.08978  0.1855         
    0.08255  0.1750         
    0.07846  0.1647         
    0.08033  0.1644         
    0.07929  0.1728         
    0.07977  0.1711         
    0.08215  0.1742         
    0.08642  0.1802         
    0.08382  0.1763         
    0.08288  0.1756         
    0.08032  0.1686         
    0.08032  0.1686         

The top 5 variables (out of 13):
   tau, Cortisol, VEGF, Clusterin_Apo_J, Fetuin_A

> 
> ctrl$functions <- caretFuncs
> ctrl$functions$summary <- fiveStats
> 
> set.seed(721)
> knnRFE <- rfe(training[, predVars],
+               training$Class,
+               sizes = varSeq,
+               metric = "ROC",
+               method = "knn",
+               tuneLength = 20,
+               preProc = c("center", "scale"),
+               trControl = cvCtrl,
+               rfeControl = ctrl)
> knnRFE

Recursive feature selection

Outer resampling method: Cross-Validation (10 fold, repeated 5 times) 

Resampling performance over subset size:

 Variables    ROC     Sens   Spec Accuracy      Kappa   ROCSD  SensSD  SpecSD
         1 0.5933 0.002857 0.9979   0.7260  0.0010089 0.11777 0.02020 0.01016
         3 0.5937 0.018571 0.9752   0.7140 -0.0076619 0.11622 0.04662 0.04097
         5 0.6143 0.013571 0.9815   0.7170 -0.0037862 0.11463 0.04122 0.06065
         7 0.6088 0.007857 0.9877   0.7200 -0.0058787 0.09660 0.03148 0.03315
         9 0.6048 0.025000 0.9701   0.7118 -0.0075269 0.08584 0.06769 0.04544
        11 0.5901 0.002500 0.9917   0.7214 -0.0078857 0.08870 0.01768 0.02199
        13 0.5925 0.000000 0.9959   0.7237 -0.0053231 0.10342 0.00000 0.02032
        15 0.5834 0.002857 0.9887   0.7192 -0.0110725 0.10369 0.02020 0.02794
        17 0.5932 0.000000 0.9927   0.7214 -0.0099586 0.09901 0.00000 0.01819
        19 0.5961 0.002500 0.9949   0.7238 -0.0034177 0.10314 0.01768 0.02325
        21 0.5910 0.007857 0.9888   0.7208 -0.0042471 0.10808 0.03148 0.03581
        23 0.6216 0.011071 0.9845   0.7184 -0.0060269 0.11942 0.03799 0.03181
        25 0.6117 0.002500 0.9959   0.7245 -0.0020861 0.10000 0.01768 0.01717
        27 0.6127 0.002857 0.9917   0.7214 -0.0071452 0.09227 0.02020 0.02420
        29 0.5969 0.005714 0.9856   0.7177 -0.0116716 0.11963 0.04041 0.03125
        31 0.6102 0.002857 0.9898   0.7201 -0.0099205 0.09457 0.02020 0.02298
        33 0.6069 0.018214 0.9816   0.7185 -0.0005412 0.12089 0.05222 0.03212
        35 0.6461 0.030357 0.9775   0.7184  0.0122230 0.13823 0.05786 0.04570
        37 0.6332 0.060000 0.9578   0.7122  0.0226785 0.13322 0.09977 0.06198
        39 0.6812 0.097143 0.9671   0.7289  0.0811982 0.12714 0.12503 0.04748
        41 0.6628 0.120357 0.9713   0.7387  0.1177189 0.13284 0.11407 0.04287
        43 0.6630 0.120714 0.9659   0.7349  0.1091118 0.12757 0.12516 0.04400
        45 0.6658 0.127500 0.9560   0.7291  0.1037281 0.12426 0.12095 0.04695
        47 0.6867 0.153929 0.9497   0.7319  0.1274832 0.11183 0.12595 0.05287
        49 0.6900 0.143929 0.9476   0.7277  0.1113355 0.14773 0.13443 0.05704
        51 0.7111 0.155357 0.9474   0.7306  0.1251865 0.11010 0.13456 0.06288
        53 0.6931 0.171071 0.9506   0.7368  0.1456113 0.12641 0.16299 0.05870
        55 0.7073 0.155357 0.9600   0.7397  0.1415426 0.12240 0.14642 0.05433
        57 0.7189 0.173929 0.9445   0.7336  0.1432551 0.11004 0.13784 0.04941
        59 0.7234 0.175357 0.9466   0.7359  0.1495572 0.12809 0.14018 0.05928
        61 0.7307 0.187143 0.9549   0.7451  0.1726817 0.10965 0.15993 0.05654
        63 0.6887 0.182143 0.9517   0.7413  0.1597071 0.13140 0.15907 0.04559
        65 0.6994 0.181786 0.9446   0.7360  0.1535770 0.13297 0.15194 0.06112
        67 0.6915 0.156786 0.9524   0.7347  0.1321827 0.14017 0.15286 0.06355
        69 0.6967 0.167500 0.9312   0.7231  0.1161093 0.12035 0.16805 0.08070
        71 0.7062 0.225714 0.9349   0.7410  0.1885801 0.10000 0.17154 0.06020
        73 0.7066 0.258929 0.9136   0.7345  0.1996475 0.13409 0.16466 0.07340
        75 0.7236 0.186786 0.9485   0.7402  0.1672137 0.11552 0.12903 0.05436
        77 0.7273 0.216071 0.9432   0.7449  0.1919755 0.12749 0.16203 0.06624
        79 0.7135 0.233929 0.9404   0.7471  0.2064023 0.13146 0.16228 0.05300
        81 0.7197 0.227143 0.9536   0.7550  0.2160954 0.14158 0.17298 0.05043
        83 0.7510 0.246786 0.9485   0.7568  0.2331345 0.10794 0.17051 0.06170
        85 0.7547 0.208571 0.9507   0.7479  0.1923819 0.08416 0.15519 0.04629
        87 0.7372 0.275000 0.9444   0.7614  0.2583755 0.14896 0.16941 0.05337
        89 0.7582 0.284643 0.9487   0.7667  0.2779023 0.09764 0.15834 0.05742
        91 0.7503 0.310714 0.9298   0.7605  0.2803165 0.10578 0.15395 0.05295
        93 0.7349 0.276786 0.9341   0.7546  0.2488224 0.12162 0.14928 0.05545
        95 0.7545 0.235357 0.9412   0.7484  0.2104636 0.10056 0.15432 0.05287
        97 0.7361 0.250000 0.9319   0.7455  0.2128423 0.11859 0.15939 0.04576
        99 0.7403 0.305357 0.9207   0.7524  0.2575767 0.10304 0.16557 0.05584
       101 0.7542 0.270000 0.9218   0.7435  0.2208093 0.10659 0.15954 0.04967
       103 0.7225 0.261429 0.9311   0.7479  0.2258201 0.14090 0.15428 0.05912
       105 0.7531 0.252143 0.9498   0.7591  0.2423378 0.12131 0.14908 0.05112
       107 0.7464 0.248929 0.9445   0.7545  0.2331962 0.10517 0.14679 0.05784
       109 0.7439 0.263214 0.9354   0.7519  0.2334823 0.11871 0.16234 0.06677
       111 0.7634 0.267143 0.9497   0.7630  0.2607737 0.11301 0.14962 0.05816
       113 0.7681 0.249643 0.9622   0.7674  0.2589877 0.09064 0.14401 0.05305
       115 0.7732 0.253571 0.9496   0.7592  0.2462899 0.08505 0.13508 0.05339
       117 0.7608 0.236429 0.9538   0.7578  0.2330311 0.10531 0.13688 0.05556
       119 0.7573 0.230714 0.9483   0.7522  0.2195383 0.10488 0.13225 0.06121
       121 0.7679 0.280357 0.9465   0.7645  0.2701641 0.09212 0.15867 0.05927
       123 0.7504 0.288929 0.9424   0.7638  0.2715084 0.10404 0.16824 0.05520
       125 0.7975 0.334286 0.9556   0.7854  0.3393123 0.07713 0.17681 0.04552
       127 0.7759 0.387500 0.9526   0.7981  0.3929460 0.13547 0.16395 0.04278
       129 0.7856 0.413214 0.9403   0.7958  0.4014277 0.10491 0.16599 0.05952
       131 0.7944 0.400357 0.9458   0.7963  0.3958451 0.09277 0.17784 0.05794
       132 0.7768 0.402500 0.9548   0.8035  0.4118878 0.12496 0.18311 0.05793
 AccuracySD KappaSD Selected
    0.01554 0.01997         
    0.03584 0.08108         
    0.04563 0.07802         
    0.02423 0.04127         
    0.03182 0.07650         
    0.01995 0.03876         
    0.01865 0.02635         
    0.02507 0.04751         
    0.01791 0.02494         
    0.01848 0.01449         
    0.02517 0.03793         
    0.02441 0.04965         
    0.01636 0.03344         
    0.02234 0.04329         
    0.02991 0.06883         
    0.02255 0.04279         
    0.02708 0.08126         
    0.03802 0.09956         
    0.04503 0.12965         
    0.04620 0.15833         
    0.03743 0.13834         
    0.04222 0.15364         
    0.03864 0.14748         
    0.04042 0.14247         
    0.04392 0.14402         
    0.04197 0.13438         
    0.04969 0.16961         
    0.04555 0.16222         
    0.04309 0.15675         
    0.04813 0.15521         
    0.05455 0.18261         
    0.04370 0.17242         
    0.06086 0.19336         
    0.04599 0.16196         
    0.05917 0.17845         
    0.05621 0.18957         
    0.05985 0.17904         
    0.04813 0.15584         
    0.06202 0.19789         
    0.05405 0.18925         
    0.05612 0.19904         
    0.05505 0.18441         
    0.05296 0.18525         
    0.05586 0.18901         
    0.05552 0.18060         
    0.06076 0.19020         
    0.05497 0.17055         
    0.05245 0.17332         
    0.05183 0.18130         
    0.04719 0.15972         
    0.04931 0.16927         
    0.05132 0.16644         
    0.04747 0.16707         
    0.05694 0.18297         
    0.05160 0.16630         
    0.05498 0.17164         
    0.04458 0.15553         
    0.04721 0.15049         
    0.05024 0.15511         
    0.05272 0.15760         
    0.05625 0.17588         
    0.05288 0.17385         
    0.05144 0.17845        *
    0.05103 0.17366         
    0.05630 0.16914         
    0.06463 0.19728         
    0.06781 0.21033         

The top 5 variables (out of 125):
   Ab_42, tau, p_tau, MMP10, MIF

> 
> ## Each of these models can be evaluate using the plot() function to see
> ## the profile across subset sizes.
> 
> ## Test set ROC results:
> rfROCfull <- roc(testing$Class,
+                  predict(rfFull, testing[,predVars], type = "prob")[,1])
> rfROCfull

Call:
roc.default(response = testing$Class, predictor = predict(rfFull,     testing[, predVars], type = "prob")[, 1])

Data: predict(rfFull, testing[, predVars], type = "prob")[, 1] in 18 controls (testing$Class Impaired) > 48 cases (testing$Class Control).
Area under the curve: 0.9034
> rfROCrfe <- roc(testing$Class,
+                 predict(rfRFE, testing[,predVars])$Impaired)
> rfROCrfe

Call:
roc.default(response = testing$Class, predictor = predict(rfRFE,     testing[, predVars])$Impaired)

Data: predict(rfRFE, testing[, predVars])$Impaired in 18 controls (testing$Class Impaired) > 48 cases (testing$Class Control).
Area under the curve: 0.8935
> 
> ldaROCfull <- roc(testing$Class,
+                   predict(ldaFull, testing[,predVars], type = "prob")[,1])
> ldaROCfull

Call:
roc.default(response = testing$Class, predictor = predict(ldaFull,     testing[, predVars], type = "prob")[, 1])

Data: predict(ldaFull, testing[, predVars], type = "prob")[, 1] in 18 controls (testing$Class Impaired) > 48 cases (testing$Class Control).
Area under the curve: 0.8981
> ldaROCrfe <- roc(testing$Class,
+                  predict(ldaRFE, testing[,predVars])$Impaired)
> ldaROCrfe

Call:
roc.default(response = testing$Class, predictor = predict(ldaRFE,     testing[, predVars])$Impaired)

Data: predict(ldaRFE, testing[, predVars])$Impaired in 18 controls (testing$Class Impaired) > 48 cases (testing$Class Control).
Area under the curve: 0.9259
> 
> nbROCfull <- roc(testing$Class,
+                   predict(nbFull, testing[,predVars], type = "prob")[,1])
There were 50 or more warnings (use warnings() to see the first 50)
> nbROCfull

Call:
roc.default(response = testing$Class, predictor = predict(nbFull,     testing[, predVars], type = "prob")[, 1])

Data: predict(nbFull, testing[, predVars], type = "prob")[, 1] in 18 controls (testing$Class Impaired) > 48 cases (testing$Class Control).
Area under the curve: 0.8287
> nbROCrfe <- roc(testing$Class,
+                  predict(nbRFE, testing[,predVars])$Impaired)
Warning message:
In FUN(1:66[[66L]], ...) :
  Numerical 0 probability for all classes with observation 22
> nbROCrfe

Call:
roc.default(response = testing$Class, predictor = predict(nbRFE,     testing[, predVars])$Impaired)

Data: predict(nbRFE, testing[, predVars])$Impaired in 18 controls (testing$Class Impaired) > 48 cases (testing$Class Control).
Area under the curve: 0.8565
> 
> svmROCfull <- roc(testing$Class,
+                   predict(svmFull, testing[,predVars], type = "prob")[,1])
> svmROCfull

Call:
roc.default(response = testing$Class, predictor = predict(svmFull,     testing[, predVars], type = "prob")[, 1])

Data: predict(svmFull, testing[, predVars], type = "prob")[, 1] in 18 controls (testing$Class Impaired) > 48 cases (testing$Class Control).
Area under the curve: 0.8669
> svmROCrfe <- roc(testing$Class,
+                  predict(svmRFE, testing[,predVars])$Impaired)
> svmROCrfe

Call:
roc.default(response = testing$Class, predictor = predict(svmRFE,     testing[, predVars])$Impaired)

Data: predict(svmRFE, testing[, predVars])$Impaired in 18 controls (testing$Class Impaired) > 48 cases (testing$Class Control).
Area under the curve: 0.8657
> 
> lrROCfull <- roc(testing$Class,
+                   predict(lrFull, testing[,predVars], type = "prob")[,1])
> lrROCfull

Call:
roc.default(response = testing$Class, predictor = predict(lrFull,     testing[, predVars], type = "prob")[, 1])

Data: predict(lrFull, testing[, predVars], type = "prob")[, 1] in 18 controls (testing$Class Impaired) > 48 cases (testing$Class Control).
Area under the curve: 0.8513
> lrROCrfe <- roc(testing$Class,
+                  predict(lrRFE, testing[,predVars])$Impaired)
> lrROCrfe

Call:
roc.default(response = testing$Class, predictor = predict(lrRFE,     testing[, predVars])$Impaired)

Data: predict(lrRFE, testing[, predVars])$Impaired in 18 controls (testing$Class Impaired) > 48 cases (testing$Class Control).
Area under the curve: 0.89
> 
> knnROCfull <- roc(testing$Class,
+                   predict(knnFull, testing[,predVars], type = "prob")[,1])
> knnROCfull

Call:
roc.default(response = testing$Class, predictor = predict(knnFull,     testing[, predVars], type = "prob")[, 1])

Data: predict(knnFull, testing[, predVars], type = "prob")[, 1] in 18 controls (testing$Class Impaired) > 48 cases (testing$Class Control).
Area under the curve: 0.8762
> knnROCrfe <- roc(testing$Class,
+                  predict(knnRFE, testing[,predVars])$Impaired)
> knnROCrfe

Call:
roc.default(response = testing$Class, predictor = predict(knnRFE,     testing[, predVars])$Impaired)

Data: predict(knnRFE, testing[, predVars])$Impaired in 18 controls (testing$Class Impaired) > 48 cases (testing$Class Control).
Area under the curve: 0.8154
> 
> 
> ## For filter methods, the sbf() function (named for Selection By Filter) is
> ## used. It has similar arguments to rfe() to control the model fitting and
> ## filtering methods. 
> 
> ## P-values are created for filtering. 
> 
> ## A set of four LDA models are fit based on two factors: p-value adjustment 
> ## using a Bonferroni adjustment and whether the predictors should be 
> ## pre-screened for high correlations. 
> 
> sbfResamp <- function(x, fun = mean)
+ {
+   x <- unlist(lapply(x$variables, length))
+   fun(x)
+ }
> sbfROC <- function(mod) auc(roc(testing$Class, predict(mod, testing)$Impaired))
> 
> ## This function calculates p-values using either a t-test (when the predictor
> ## has 2+ distinct values) or using Fisher's Exact Test otherwise.
> 
> pScore <- function(x, y)
+   {
+     numX <- length(unique(x))
+     if(numX > 2)
+       {
+        out <- t.test(x ~ y)$p.value
+       } else {
+        out <- fisher.test(factor(x), y)$p.value
+       }
+     out
+   }
> ldaWithPvalues <- ldaSBF
> ldaWithPvalues$score <- pScore
> ldaWithPvalues$summary <- fiveStats
> 
> ## Predictors are retained if their p-value is less than the completely 
> ## subjective cut-off of 0.05.
> 
> ldaWithPvalues$filter <- function (score, x, y)
+ {
+   keepers <- score <= 0.05
+   keepers
+ }
> 
> sbfCtrl <- sbfControl(method = "repeatedcv",
+                       repeats = 5,
+                       verbose = TRUE,
+                       functions = ldaWithPvalues,
+                       index = index)
> 
> rawCorr <- sbf(training[, predVars],
+                training$Class,
+                tol = 1.0e-12,
+                sbfControl = sbfCtrl)
> rawCorr

Selection By Filter

Outer resampling method: Cross-Validation (10 fold, repeated 5 times) 

Resampling performance:

    ROC   Sens   Spec Accuracy  Kappa   ROCSD SensSD  SpecSD AccuracySD KappaSD
 0.9168 0.7439 0.9136    0.867 0.6588 0.06458 0.1778 0.05973     0.0567  0.1512

Using the training set, 47 variables were selected:
   Alpha_1_Antitrypsin, Apolipoprotein_D, B_Lymphocyte_Chemoattractant_BL, Complement_3, Cortisol...

During resampling, the top 5 selected variables (out of a possible 66):
   Ab_42 (100%), Cortisol (100%), Creatine_Kinase_MB (100%), Cystatin_C (100%), E4 (100%)

On average, 46.1 variables were selected (min = 38, max = 57)
> 
> ldaWithPvalues$filter <- function (score, x, y)
+ {
+   score <- p.adjust(score,  "bonferroni")
+   keepers <- score <= 0.05
+   keepers
+ }
> sbfCtrl <- sbfControl(method = "repeatedcv",
+                       repeats = 5,
+                       verbose = TRUE,
+                       functions = ldaWithPvalues,
+                       index = index)
> 
> adjCorr <- sbf(training[, predVars],
+                training$Class,
+                tol = 1.0e-12,
+                sbfControl = sbfCtrl)
> adjCorr

Selection By Filter

Outer resampling method: Cross-Validation (10 fold, repeated 5 times) 

Resampling performance:

    ROC   Sens   Spec Accuracy  Kappa   ROCSD SensSD  SpecSD AccuracySD KappaSD
 0.8563 0.6443 0.9083   0.8361 0.5663 0.07646  0.201 0.06721    0.06283  0.1778

Using the training set, 17 variables were selected:
   Creatine_Kinase_MB, Eotaxin_3, FAS, GRO_alpha, IGF_BP_2...

During resampling, the top 5 selected variables (out of a possible 23):
   Ab_42 (100%), GRO_alpha (100%), MIF (100%), TRAIL_R3 (100%), p_tau (100%)

On average, 13.5 variables were selected (min = 9, max = 19)
> 
> ldaWithPvalues$filter <- function (score, x, y)
+ {
+   keepers <- score <= 0.05
+   corrMat <- cor(x[,keepers])
+   tooHigh <- findCorrelation(corrMat, .75)
+   if(length(tooHigh) > 0) keepers[tooHigh] <- FALSE
+   keepers
+ }
> sbfCtrl <- sbfControl(method = "repeatedcv",
+                       repeats = 5,
+                       verbose = TRUE,
+                       functions = ldaWithPvalues,
+                       index = index)
> 
> rawNoCorr <- sbf(training[, predVars],
+                  training$Class,
+                  tol = 1.0e-12,
+                  sbfControl = sbfCtrl)
> rawNoCorr

Selection By Filter

Outer resampling method: Cross-Validation (10 fold, repeated 5 times) 

Resampling performance:

   ROC   Sens   Spec Accuracy  Kappa   ROCSD SensSD  SpecSD AccuracySD KappaSD
 0.918 0.7357 0.9125   0.8638 0.6508 0.06282 0.1787 0.06498    0.05687  0.1474

Using the training set, 45 variables were selected:
   Alpha_1_Antitrypsin, Apolipoprotein_D, B_Lymphocyte_Chemoattractant_BL, Complement_3, Cortisol...

During resampling, the top 5 selected variables (out of a possible 66):
   Ab_42 (100%), E4 (100%), IGF_BP_2 (100%), IL_17E (100%), IL_7 (100%)

On average, 44.3 variables were selected (min = 37, max = 54)
> 
> ldaWithPvalues$filter <- function (score, x, y)
+ {
+   score <- p.adjust(score,  "bonferroni")
+   keepers <- score <= 0.05
+   corrMat <- cor(x[,keepers])
+   tooHigh <- findCorrelation(corrMat, .75)
+   if(length(tooHigh) > 0) keepers[tooHigh] <- FALSE
+   keepers
+ }
> sbfCtrl <- sbfControl(method = "repeatedcv",
+                       repeats = 5,
+                       verbose = TRUE,
+                       functions = ldaWithPvalues,
+                       index = index)
> 
> adjNoCorr <- sbf(training[, predVars],
+                  training$Class,
+                  tol = 1.0e-12,
+                  sbfControl = sbfCtrl)
> adjNoCorr

Selection By Filter

Outer resampling method: Cross-Validation (10 fold, repeated 5 times) 

Resampling performance:

    ROC   Sens   Spec Accuracy  Kappa   ROCSD SensSD  SpecSD AccuracySD KappaSD
 0.8563 0.6443 0.9083   0.8361 0.5663 0.07646  0.201 0.06721    0.06283  0.1778

Using the training set, 17 variables were selected:
   Creatine_Kinase_MB, Eotaxin_3, FAS, GRO_alpha, IGF_BP_2...

During resampling, the top 5 selected variables (out of a possible 23):
   Ab_42 (100%), GRO_alpha (100%), MIF (100%), TRAIL_R3 (100%), p_tau (100%)

On average, 13.5 variables were selected (min = 9, max = 19)
> 
> ## Filter methods test set ROC results:
> 
> sbfROC(rawCorr)
Area under the curve: 0.9178
> sbfROC(rawNoCorr)
Area under the curve: 0.9155
> sbfROC(adjCorr)
Area under the curve: 0.9259
> sbfROC(adjNoCorr)
Area under the curve: 0.9259
> 
> ## Get the resampling results for all the models
> 
> rfeResamples <- resamples(list(RF = rfRFE,
+                                "Logistic Reg." = lrRFE,
+                                "SVM" = svmRFE,
+                                "$K$--NN" = knnRFE,
+                                "N. Bayes" = nbRFE,
+                                "LDA" = ldaRFE))
> summary(rfeResamples)

Call:
summary.resamples(object = rfeResamples)


Call:
summary.resamples(object = rfeResamples)

Models: RF, Logistic Reg., SVM, $K$--NN, N. Bayes, LDA 
Number of resamples: 50 

ROC 
                Min. 1st Qu. Median   Mean 3rd Qu.   Max. NA's
RF            0.6929  0.8530 0.9135 0.9003  0.9566 1.0000    0
Logistic Reg. 0.6429  0.7984 0.8571 0.8571  0.9370 1.0000    0
SVM           0.7000  0.8459 0.8947 0.8909  0.9605 1.0000    0
$K$--NN       0.6353  0.7460 0.8026 0.7975  0.8600 0.9276    0
N. Bayes      0.6357  0.7759 0.8346 0.8318  0.8797 0.9925    0
LDA           0.7429  0.8716 0.9312 0.9163  0.9783 1.0000    0

Sens 
                Min. 1st Qu. Median   Mean 3rd Qu.   Max. NA's
RF            0.2500  0.5714 0.7143 0.6732  0.7500 1.0000    0
Logistic Reg. 0.2857  0.5179 0.5714 0.6225  0.7143 1.0000    0
SVM           0.2857  0.5714 0.7143 0.6607  0.7500 1.0000    0
$K$--NN       0.0000  0.2500 0.2857 0.3343  0.4286 0.7143    0
N. Bayes      0.2857  0.5714 0.7143 0.6807  0.7500 1.0000    0
LDA           0.2500  0.6250 0.7143 0.7407  0.8571 1.0000    0

Spec 
                Min. 1st Qu. Median   Mean 3rd Qu. Max. NA's
RF            0.8500  0.9474 0.9500 0.9619  1.0000    1    0
Logistic Reg. 0.7500  0.8947 0.9474 0.9287  0.9500    1    0
SVM           0.8421  0.9474 0.9500 0.9548  1.0000    1    0
$K$--NN       0.8421  0.9000 0.9500 0.9556  1.0000    1    0
N. Bayes      0.6500  0.8000 0.8421 0.8387  0.8947    1    0
LDA           0.7895  0.8947 0.9000 0.9217  0.9500    1    0

Accuracy 
                Min. 1st Qu. Median   Mean 3rd Qu.   Max. NA's
RF            0.7778  0.8519 0.8846 0.8825  0.9231 1.0000    0
Logistic Reg. 0.7037  0.8077 0.8462 0.8449  0.8889 1.0000    0
SVM           0.7778  0.8462 0.8846 0.8744  0.9231 1.0000    0
$K$--NN       0.6786  0.7407 0.7778 0.7854  0.8148 0.8846    0
N. Bayes      0.6538  0.7500 0.7778 0.7950  0.8462 0.9630    0
LDA           0.7407  0.8276 0.8846 0.8721  0.9231 1.0000    0

Kappa 
                Min. 1st Qu. Median   Mean 3rd Qu.   Max. NA's
RF            0.2895  0.5846 0.6929 0.6768  0.7868 1.0000    0
Logistic Reg. 0.2087  0.4448 0.5986 0.5805  0.6966 1.0000    0
SVM           0.3622  0.5278 0.6624 0.6563  0.7851 1.0000    0
$K$--NN       0.0000  0.2025 0.3390 0.3393  0.4761 0.6929    0
N. Bayes      0.2180  0.3999 0.4957 0.5000  0.6370 0.9143    0
LDA           0.2895  0.5519 0.6808 0.6678  0.7851 1.0000    0

> 
> fullResamples <- resamples(list(RF = rfFull,
+                                 "Logistic Reg." = lrFull,
+                                 "SVM" = svmFull,
+                                 "$K$--NN" = knnFull,
+                                 "N. Bayes" = nbFull,
+                                 "LDA" = ldaFull))
> summary(fullResamples)

Call:
summary.resamples(object = fullResamples)


Call:
summary.resamples(object = fullResamples)

Models: RF, Logistic Reg., SVM, $K$--NN, N. Bayes, LDA 
Number of resamples: 50 

ROC 
                Min. 1st Qu. Median   Mean 3rd Qu.   Max. NA's
RF            0.6571  0.8527 0.9031 0.8927  0.9423 0.9925    0
Logistic Reg. 0.5214  0.7240 0.7951 0.7846  0.8612 0.9464    0
SVM           0.7000  0.8441 0.8938 0.8891  0.9549 1.0000    0
$K$--NN       0.7030  0.8047 0.8536 0.8494  0.9011 0.9737    0
N. Bayes      0.5263  0.7237 0.8036 0.7980  0.8690 1.0000    0
LDA           0.5357  0.7864 0.8571 0.8439  0.9059 0.9850    0

Sens 
                Min. 1st Qu. Median   Mean 3rd Qu.   Max. NA's
RF            0.0000  0.3750 0.4643 0.4493  0.5714 0.7143    0
Logistic Reg. 0.1429  0.5714 0.7143 0.6696  0.7143 1.0000    0
SVM           0.2857  0.5714 0.6250 0.6446  0.7143 1.0000    0
$K$--NN       0.0000  0.1295 0.1429 0.1957  0.2857 0.4286    0
N. Bayes      0.2500  0.4464 0.5714 0.5936  0.7143 0.8750    0
LDA           0.2500  0.5714 0.7143 0.6857  0.8304 1.0000    0

Spec 
                Min. 1st Qu. Median   Mean 3rd Qu. Max. NA's
RF            0.9000  0.9500 1.0000 0.9836  1.0000    1    0
Logistic Reg. 0.4737  0.7368 0.7895 0.7779  0.8500    1    0
SVM           0.8421  0.9000 0.9487 0.9507  1.0000    1    0
$K$--NN       0.9474  1.0000 1.0000 0.9907  1.0000    1    0
N. Bayes      0.6316  0.7500 0.8000 0.8139  0.8947    1    0
LDA           0.6842  0.7500 0.8421 0.8294  0.8947    1    0

Accuracy 
                Min. 1st Qu. Median   Mean 3rd Qu.   Max. NA's
RF            0.7308  0.8148 0.8462 0.8375  0.8846 0.9259    0
Logistic Reg. 0.5185  0.6952 0.7692 0.7478  0.8077 0.8889    0
SVM           0.7407  0.8214 0.8519 0.8670  0.9231 1.0000    0
$K$--NN       0.6923  0.7500 0.7692 0.7731  0.8022 0.8519    0
N. Bayes      0.5714  0.7037 0.7692 0.7530  0.8077 0.8889    0
LDA           0.6667  0.7500 0.7778 0.7900  0.8462 0.9259    0

Kappa 
                  Min. 1st Qu. Median   Mean 3rd Qu.   Max. NA's
RF             0.00000  0.4360 0.5246 0.5027  0.6609 0.7874    0
Logistic Reg. -0.19800  0.3292 0.4336 0.4170  0.5098 0.7417    0
SVM            0.21580  0.5278 0.6170 0.6354  0.7851 1.0000    0
$K$--NN       -0.07216  0.1695 0.1980 0.2417  0.3573 0.5263    0
N. Bayes       0.02326  0.2863 0.4075 0.3966  0.5092 0.7235    0
LDA            0.10330  0.3741 0.4757 0.4910  0.6089 0.8224    0

> 
> filteredResamples <- resamples(list("No Adjustment, Corr Vars" = rawCorr,
+                                     "No Adjustment, No Corr Vars" = rawNoCorr,
+                                     "Bonferroni, Corr Vars" = adjCorr,
+                                     "Bonferroni, No Corr Vars" = adjNoCorr))
> summary(filteredResamples)

Call:
summary.resamples(object = filteredResamples)


Call:
summary.resamples(object = filteredResamples)

Models: No Adjustment, Corr Vars, No Adjustment, No Corr Vars, Bonferroni, Corr Vars, Bonferroni, No Corr Vars 
Number of resamples: 50 

ROC 
                              Min. 1st Qu. Median   Mean 3rd Qu. Max. NA's
No Adjustment, Corr Vars    0.7714  0.8647 0.9281 0.9168  0.9768    1    0
No Adjustment, No Corr Vars 0.7786  0.8816 0.9263 0.9180  0.9759    1    0
Bonferroni, Corr Vars       0.6643  0.8239 0.8531 0.8563  0.8970    1    0
Bonferroni, No Corr Vars    0.6643  0.8239 0.8531 0.8563  0.8970    1    0

Sens 
                              Min. 1st Qu. Median   Mean 3rd Qu. Max. NA's
No Adjustment, Corr Vars    0.2500  0.5848 0.7321 0.7439  0.8571    1    0
No Adjustment, No Corr Vars 0.3750  0.5714 0.7143 0.7357  0.8571    1    0
Bonferroni, Corr Vars       0.2857  0.5000 0.6250 0.6443  0.7500    1    0
Bonferroni, No Corr Vars    0.2857  0.5000 0.6250 0.6443  0.7500    1    0

Spec 
                              Min. 1st Qu. Median   Mean 3rd Qu. Max. NA's
No Adjustment, Corr Vars    0.7895  0.8947    0.9 0.9136    0.95    1    0
No Adjustment, No Corr Vars 0.7500  0.8500    0.9 0.9125    0.95    1    0
Bonferroni, Corr Vars       0.7368  0.8500    0.9 0.9083    0.95    1    0
Bonferroni, No Corr Vars    0.7368  0.8500    0.9 0.9083    0.95    1    0

Accuracy 
                              Min. 1st Qu. Median   Mean 3rd Qu. Max. NA's
No Adjustment, Corr Vars    0.7407  0.8462 0.8571 0.8670  0.8919    1    0
No Adjustment, No Corr Vars 0.7407  0.8226 0.8519 0.8638  0.8889    1    0
Bonferroni, Corr Vars       0.7037  0.7778 0.8462 0.8361  0.8846    1    0
Bonferroni, No Corr Vars    0.7037  0.7778 0.8462 0.8361  0.8846    1    0

Kappa 
                              Min. 1st Qu. Median   Mean 3rd Qu. Max. NA's
No Adjustment, Corr Vars    0.3193  0.5705 0.6609 0.6588  0.7390    1    0
No Adjustment, No Corr Vars 0.3549  0.5702 0.6414 0.6508  0.7381    1    0
Bonferroni, Corr Vars       0.2087  0.4343 0.5766 0.5663  0.6957    1    0
Bonferroni, No Corr Vars    0.2087  0.4343 0.5766 0.5663  0.6957    1    0

> 
> sessionInfo()
R version 2.15.2 (2012-10-26)
Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)

locale:
[1] C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] klaR_0.6-7                     kernlab_0.9-16                
 [3] randomForest_4.6-7             e1071_1.6-1                   
 [5] class_7.3-5                    pROC_1.5.4                    
 [7] corrplot_0.70                  RColorBrewer_1.0-5            
 [9] doMC_1.2.5                     multicore_0.1-7               
[11] iterators_1.0.6                caret_5.15-87                 
[13] lattice_0.20-10                foreach_1.4.0                 
[15] AppliedPredictiveModeling_1.01 reshape2_1.2.1                
[17] plyr_1.7.1                     MASS_7.3-22                   
[19] CORElearn_0.9.40               rpart_4.0-3                   
[21] cluster_1.14.3                

loaded via a namespace (and not attached):
[1] codetools_0.2-8 compiler_2.15.2 grid_2.15.2     stringr_0.6.1  
[5] tools_2.15.2   
> 
> 
> 
> proc.time()
      user     system    elapsed 
339015.242   8393.323  26417.667 

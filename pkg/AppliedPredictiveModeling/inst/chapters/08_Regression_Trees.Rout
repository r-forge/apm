
R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ################################################################################
> ### R code from Applied Predictive Modeling (2013) by Kuhn and Johnson.
> ### Copyright 2013 Kuhn and Johnson
> ### Web Page: http://www.appliedpredictivemodeling.com
> ### Contact: Max Kuhn (mxkuhn@gmail.com) 
> ###
> ### Chapter 8: Regression Trees and Rule-Based Models 
> ###
> ### Required packages: AppliedPredictiveModeling, caret, Cubis, doMC (optional),
> ###                    gbm, lattice, party, partykit, randomForest, rpart, RWeka
> ###
> ### Data used: The solubility from the AppliedPredictiveModeling package
> ###
> ### Notes: 
> ### 1) This code is provided without warranty.
> ###
> ### 2) This code should help the user reproduce the results in the
> ### text. There will be differences between this code and what is is
> ### the computing section. For example, the computing sections show
> ### how the source functions work (e.g. randomForest() or plsr()),
> ### which were not directly used when creating the book. Also, there may be 
> ### syntax differences that occur over time as packages evolve. These files 
> ### will reflect those changes.
> ###
> ### 3) In some cases, the calculations in the book were run in 
> ### parallel. The sub-processes may reset the random number seed.
> ### Your results may slightly vary.
> ###
> ################################################################################
> 
> ################################################################################
> ### Load the data
> 
> library(AppliedPredictiveModeling)
> data(solubility)
> 
> ### Create a control function that will be used across models. We
> ### create the fold assignments explicitly instead of relying on the
> ### random number seed being set to identical values.
> 
> library(caret)
Loading required package: lattice
Loading required package: ggplot2
> set.seed(100)
> indx <- createFolds(solTrainY, returnTrain = TRUE)
> ctrl <- trainControl(method = "cv", index = indx)
> 
> ################################################################################
> ### Section 8.1 Basic Regression Trees
> 
> library(rpart)
> 
> ### Fit two CART models to show the initial splitting process. rpart 
> ### only uses formulas, so we put the predictors and outcome into
> ### a common data frame first.
> 
> trainData <- solTrainXtrans
> trainData$y <- solTrainY
> 
> rpStump <- rpart(y ~ ., data = trainData, 
+                  control = rpart.control(maxdepth = 1))
> rpSmall <- rpart(y ~ ., data = trainData, 
+                  control = rpart.control(maxdepth = 2))
> 
> ### Tune the model
> library(caret)
> 
> set.seed(100)
> cartTune <- train(x = solTrainXtrans, y = solTrainY,
+                   method = "rpart",
+                   tuneLength = 25,
+                   trControl = ctrl)
Warning message:
In nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo,  :
  There were missing values in resampled performance measures.
> cartTune
CART 

951 samples
228 predictors

No pre-processing
Resampling: Cross-Validated (10 fold) 

Summary of sample sizes: 856, 857, 855, 856, 856, 855, ... 

Resampling results across tuning parameters:

  cp       RMSE   Rsquared  RMSE SD  Rsquared SD
  0.0029   0.972  0.775     0.0654   0.039      
  0.00299  0.966  0.778     0.0533   0.0356     
  0.00328  0.977  0.773     0.0496   0.0332     
  0.00356  0.986  0.768     0.0492   0.0346     
  0.00386  0.998  0.763     0.0575   0.0364     
  0.00401  1      0.761     0.0513   0.0349     
  0.00405  1.01   0.757     0.0521   0.0385     
  0.00422  1.02   0.753     0.0567   0.0426     
  0.00443  1.02   0.752     0.0544   0.0407     
  0.00474  1.02   0.751     0.0553   0.0441     
  0.0052   1.02   0.75      0.0541   0.0445     
  0.00618  1.02   0.75      0.0596   0.0484     
  0.00652  1.03   0.745     0.0575   0.0473     
  0.00829  1.05   0.737     0.0687   0.051      
  0.00886  1.05   0.736     0.0645   0.0503     
  0.0115   1.1    0.713     0.0896   0.0541     
  0.0118   1.1    0.709     0.0936   0.0575     
  0.0155   1.12   0.697     0.0995   0.0599     
  0.0179   1.13   0.691     0.106    0.0681     
  0.0265   1.17   0.668     0.087    0.0595     
  0.0473   1.26   0.617     0.103    0.0728     
  0.0618   1.32   0.58      0.124    0.086      
  0.0697   1.4    0.527     0.123    0.0846     
  0.138    1.54   0.438     0.2      0.0933     
  0.373    1.96   0.278     0.199    0.0092     

RMSE was used to select the optimal model using  the smallest value.
The final value used for the model was cp = 0.00299. 
> ## cartTune$finalModel
> 
> 
> ### Plot the tuning results
> plot(cartTune, scales = list(x = list(log = 10)))
> 
> ### Use the partykit package to make some nice plots. First, convert
> ### the rpart objects to party objects.
> 
> # library(partykit)
> # 
> # cartTree <- as.party(cartTune$finalModel)
> # plot(cartTree)
> 
> ### Get the variable importance. 'competes' is an argument that
> ### controls whether splits not used in the tree should be included
> ### in the importance calculations.
> 
> cartImp <- varImp(cartTune, scale = FALSE, competes = FALSE)
> cartImp
rpart variable importance

  only 20 most important variables shown (out of 228)

                  Overall
NumNonHBonds       0.9070
SurfaceArea2       0.7564
NumMultBonds       0.7453
NumCarbon          0.7257
MolWeight          0.6693
NumNonHAtoms       0.6093
NumBonds           0.5871
FP116              0.4788
NumOxygen          0.4706
NumRotBonds        0.3794
SurfaceArea1       0.3554
NumHydrogen        0.3522
FP081              0.2594
FP075              0.2435
FP077              0.1992
HydrophilicFactor  0.1164
FP026              0.0000
FP197              0.0000
FP027              0.0000
FP036              0.0000
> 
> ### Save the test set results in a data frame                 
> testResults <- data.frame(obs = solTestY,
+                           CART = predict(cartTune, solTestXtrans))
> 
> ### Tune the conditional inference tree
> 
> cGrid <- data.frame(mincriterion = sort(c(.95, seq(.75, .99, length = 2))))
> 
> set.seed(100)
> ctreeTune <- train(x = solTrainXtrans, y = solTrainY,
+                    method = "ctree",
+                    tuneGrid = cGrid,
+                    trControl = ctrl)
Loading required package: party
Loading required package: survival
Loading required package: splines

Attaching package: ‘survival’

The following object is masked from ‘package:caret’:

    cluster

Loading required package: grid
Loading required package: modeltools
Loading required package: stats4
Loading required package: coin
Loading required package: mvtnorm
Loading required package: zoo

Attaching package: ‘zoo’

The following object is masked from ‘package:base’:

    as.Date, as.Date.numeric

Loading required package: sandwich
Loading required package: strucchange
Loading required package: vcd
Loading required package: MASS
Loading required package: colorspace
> ctreeTune
Conditional Inference Tree 

951 samples
228 predictors

No pre-processing
Resampling: Cross-Validated (10 fold) 

Summary of sample sizes: 856, 857, 855, 856, 856, 855, ... 

Resampling results across tuning parameters:

  mincriterion  RMSE   Rsquared  RMSE SD  Rsquared SD
  0.75          0.927  0.79      0.107    0.0671     
  0.95          0.94   0.785     0.104    0.063      
  0.99          0.957  0.777     0.111    0.07       

RMSE was used to select the optimal model using  the smallest value.
The final value used for the model was mincriterion = 0.75. 
> plot(ctreeTune)
> 
> ##ctreeTune$finalModel               
> plot(ctreeTune$finalModel)
> 
> testResults$cTree <- predict(ctreeTune, solTestXtrans)
> 
> ################################################################################
> ### Section 8.2 Regression Model Trees and 8.3 Rule-Based Models
> 
> ### Tune the model tree. Using method = "M5" actually tunes over the
> ### tree- and rule-based versions of the model. M = 10 is also passed
> ### in to make sure that there are larger terminal nodes for the
> ### regression models.
> 
> set.seed(100)
> m5Tune <- train(x = solTrainXtrans, y = solTrainY,
+                 method = "M5",
+                 trControl = ctrl,
+                 control = Weka_control(M = 10))
Loading required package: RWeka
> m5Tune
Model Tree 

951 samples
228 predictors

No pre-processing
Resampling: Cross-Validated (10 fold) 

Summary of sample sizes: 856, 857, 855, 856, 856, 855, ... 

Resampling results across tuning parameters:

  pruned  smoothed  rules  RMSE   Rsquared  RMSE SD  Rsquared SD
  Yes     Yes       Yes    0.741  0.867     0.044    0.0276     
  Yes     Yes       No     0.737  0.868     0.0465   0.0274     
  Yes     No        Yes    0.744  0.866     0.0432   0.0277     
  Yes     No        No     0.751  0.863     0.0495   0.0273     
  No      Yes       Yes    0.882  0.814     0.0633   0.0382     
  No      Yes       No     0.738  0.867     0.0737   0.0346     
  No      No        Yes    1.07   0.732     0.112    0.0672     
  No      No        No     0.899  0.806     0.123    0.0553     

RMSE was used to select the optimal model using  the smallest value.
The final values used for the model were pruned = Yes, smoothed = Yes and
 rules = No. 
> 
> plot(m5Tune)
> 
> ## m5Tune$finalModel
> 
> ## plot(m5Tune$finalModel)
> 
> ### Show the rule-based model too
> 
> ruleFit <- M5Rules(y~., data = trainData, control = Weka_control(M = 10))
> ruleFit
M5 pruned model rules 
(using smoothed linear models) :
Number of Rules : 9

Rule: 1
IF
	NumCarbon <= 3.777
	MolWeight > 4.83
THEN

y = 
	-0.0051 * FP004 
	- 0.0196 * FP006 
	+ 0.334 * FP007 
	+ 0.0036 * FP008 
	- 0.446 * FP010 
	+ 0.003 * FP011 
	- 0.015 * FP012 
	- 0.0379 * FP013 
	+ 0.0104 * FP028 
	- 0.0206 * FP029 
	+ 0.0038 * FP031 
	+ 0.0268 * FP049 
	+ 0.0091 * FP053 
	+ 0.0049 * FP057 
	- 0.1687 * FP061 
	+ 0.0257 * FP063 
	+ 0.2426 * FP070 
	+ 0.0161 * FP071 
	+ 0.2737 * FP073 
	+ 0.1821 * FP074 
	- 0.0088 * FP078 
	+ 0.2579 * FP082 
	- 0.2672 * FP085 
	+ 0.003 * FP088 
	- 0.624 * FP094 
	- 0.007 * FP103 
	- 0.484 * FP106 
	- 0.3758 * FP107 
	+ 0.0035 * FP108 
	- 0.0031 * FP115 
	+ 0.0256 * FP116 
	+ 0.2656 * FP124 
	+ 0.3774 * FP125 
	+ 0.0057 * FP137 
	+ 0.0351 * FP138 
	+ 0.0045 * FP140 
	+ 0.0184 * FP142 
	- 0.0257 * FP145 
	- 0.5774 * FP148 
	- 0.1843 * FP168 
	- 0.0039 * FP169 
	- 0.0087 * FP178 
	- 1.9064 * MolWeight 
	- 3.6886 * NumAtoms 
	+ 1.9205 * NumNonHAtoms 
	- 0.0039 * NumBonds 
	- 0.0154 * NumNonHBonds 
	+ 0.131 * NumMultBonds 
	- 0.0039 * NumRotBonds 
	- 0.5433 * NumDblBonds 
	+ 1.1141 * NumHydrogen 
	- 1.1123 * NumCarbon 
	+ 0.5363 * NumOxygen 
	+ 0.5096 * NumHalogen 
	+ 0.1646 * SurfaceArea1 
	- 0.0009 * SurfaceArea2 
	+ 12.193 [392/31.205%]

Rule: 2
IF
	NumCarbon > 2.999
THEN

y = 
	0.0256 * FP005 
	+ 0.2096 * FP008 
	+ 0.0102 * FP023 
	+ 0.0168 * FP026 
	+ 0.5555 * FP031 
	+ 0.579 * FP037 
	+ 0.0123 * FP040 
	- 1.1128 * FP048 
	+ 0.4039 * FP054 
	+ 0.0088 * FP074 
	+ 0.5353 * FP075 
	+ 0.0142 * FP077 
	+ 0.4906 * FP084 
	+ 0.0086 * FP099 
	- 0.2592 * FP105 
	+ 0.0124 * FP116 
	- 0.1811 * FP117 
	- 0.0131 * FP123 
	+ 0.0061 * FP124 
	+ 0.0114 * FP138 
	+ 0.9086 * FP142 
	+ 0.284 * FP148 
	- 0.5026 * FP158 
	+ 0.7488 * FP162 
	- 0.1773 * FP169 
	+ 0.0106 * FP171 
	+ 0.0122 * FP202 
	- 0.2673 * FP205 
	- 2.3699 * MolWeight 
	- 2.0217 * NumNonHAtoms 
	- 0.1342 * NumBonds 
	- 0.0464 * NumNonHBonds 
	- 0.2273 * NumMultBonds 
	- 0.0086 * NumRotBonds 
	- 0.0083 * NumDblBonds 
	+ 0.2843 * NumHydrogen 
	+ 0.0309 * NumCarbon 
	+ 0.2601 * HydrophilicFactor 
	+ 0.2132 * SurfaceArea1 
	+ 12.617 [342/29.406%]

Rule: 3
IF
	SurfaceArea1 > 0.978
	NumCarbon > 2.508
	NumRotBonds > 0.896
THEN

y = 
	0.0226 * FP012 
	+ 0.1216 * FP031 
	+ 0.2876 * FP074 
	+ 0.4424 * FP075 
	+ 0.0587 * FP094 
	- 0.2634 * FP103 
	+ 0.457 * FP116 
	- 0.0722 * FP124 
	+ 0.0515 * FP138 
	- 0.1534 * FP145 
	+ 0.0775 * FP198 
	+ 0.0335 * FP202 
	+ 0.0101 * NumAtoms 
	- 0.367 * NumBonds 
	- 0.1791 * NumRotBonds 
	- 0.0446 * NumDblBonds 
	+ 0.1313 * NumHydrogen 
	- 1.294 * NumCarbon 
	+ 0.0667 * HydrophilicFactor 
	+ 0.0709 * SurfaceArea1 
	- 0.0449 * SurfaceArea2 
	+ 3.0246 [46/20.718%]

Rule: 4
IF
	SurfaceArea1 > 0.978
	MolWeight <= 4.612
	FP063 <= 0.5
THEN

y = 
	-0.0627 * FP012 
	+ 0.3274 * FP019 
	+ 0.0714 * FP027 
	+ 0.0461 * FP046 
	+ 0.0997 * FP060 
	+ 0.2555 * FP063 
	- 0.0214 * FP069 
	- 0.0282 * FP080 
	+ 0.2329 * FP084 
	- 0.0939 * FP117 
	- 0.2117 * FP150 
	- 0.2655 * MolWeight 
	- 0.684 * NumAtoms 
	- 0.4058 * NumBonds 
	- 0.1596 * NumMultBonds 
	+ 0.0829 * NumHydrogen 
	- 0.0169 * NumCarbon 
	+ 0.124 * HydrophilicFactor 
	+ 0.0233 * SurfaceArea1 
	+ 3.812 [32/26.932%]

Rule: 5
IF
	SurfaceArea1 > 0.978
	MolWeight <= 4.612
THEN

y = 
	0.7901 * FP019 
	+ 0.076 * FP027 
	+ 0.0833 * FP046 
	+ 0.0449 * FP060 
	- 0.2498 * FP080 
	+ 0.5383 * FP084 
	- 0.2312 * FP117 
	- 0.3114 * FP150 
	- 0.5173 * MolWeight 
	- 0.4147 * NumBonds 
	- 0.3577 * NumMultBonds 
	+ 0.1924 * NumHydrogen 
	- 0.1714 * NumCarbon 
	+ 0.035 * SurfaceArea1 
	+ 3.65 [28/24.814%]

Rule: 6
IF
	SurfaceArea1 <= 4.159
	NumHydrogen <= 3.414
THEN

y = 
	0.2494 * FP012 
	- 0.2276 * FP061 
	+ 0.1541 * FP073 
	+ 0.2614 * FP084 
	- 0.1802 * FP117 
	- 0.143 * FP150 
	- 0.987 * NumAtoms 
	- 0.5554 * NumBonds 
	+ 0.0012 * NumHydrogen 
	+ 0.1506 * HydrophilicFactor 
	+ 0.0586 * SurfaceArea1 
	+ 2.1976 [28/21.074%]

Rule: 7
IF
	SurfaceArea1 > 2.241
	FP046 <= 0.5
	NumBonds > 2.74
THEN

y = 
	0.1839 * FP012 
	- 0.1737 * FP061 
	+ 0.1283 * FP073 
	+ 1.005 * FP084 
	- 0.2347 * FP117 
	- 0.3036 * FP150 
	- 0.9024 * NumBonds 
	+ 0.3854 * NumHydrogen 
	- 0.5952 * NumCarbon 
	+ 0.0726 * SurfaceArea1 
	+ 1.7728 [27/29.999%]

Rule: 8
IF
	NumHydrogen <= 3.414
THEN

y = 
	0.1245 * FP006 
	+ 0.5343 * FP073 
	+ 0.1415 * FP079 
	- 0.1253 * FP090 
	- 2.0355 * NumAtoms 
	- 0.1142 * NumHydrogen 
	+ 4.6438 [34/35.507%]

Rule: 9

y = 
	-0.1389 * FP090 
	- 1.8894 * NumHydrogen 
	+ 4.2467 [22/27.359%]


> 
> ################################################################################
> ### Section 8.4 Bagged Trees
> 
> ### Optional: parallel processing can be used via the 'do' packages,
> ### such as doMC, doMPI etc. We used doMC (not on Windows) to speed
> ### up the computations.
> 
> ### WARNING: Be aware of how much memory is needed to parallel
> ### process. It can very quickly overwhelm the available hardware. The
> ### estimate of the median memory usage (VSIZE = total memory size) 
> ### was 9706M for a core, but could range up to 9706M. This becomes 
> ### severe when parallelizing randomForest() and (especially) calls 
> ### to cforest(). 
> 
> ### WARNING 2: The RWeka package does not work well with some forms of
> ### parallel processing, such as mutlicore (i.e. doMC).
> 
> library(doMC)
Loading required package: foreach
Loading required package: iterators
Loading required package: parallel
> registerDoMC(5)
> 
> set.seed(100)
> 
> treebagTune <- train(x = solTrainXtrans, y = solTrainY,
+                      method = "treebag",
+                      nbagg = 50,
+                      trControl = ctrl)
Loading required package: ipred
Loading required package: nnet
Loading required package: class
Loading required package: prodlim
KernSmooth 2.23 loaded
Copyright M. P. Wand 1997-2009
Loading required package: plyr

Attaching package: ‘plyr’

The following object is masked from ‘package:modeltools’:

    empty

> 
> treebagTune
Bagged CART 

951 samples
228 predictors

No pre-processing
Resampling: Cross-Validated (10 fold) 

Summary of sample sizes: 856, 857, 855, 856, 856, 855, ... 

Resampling results

  RMSE   Rsquared  RMSE SD  Rsquared SD
  0.907  0.805     0.0664   0.0419     

 
> 
> ################################################################################
> ### Section 8.5 Random Forests
> 
> mtryGrid <- data.frame(mtry = floor(seq(10, ncol(solTrainXtrans), length = 10)))
> 
> 
> ### Tune the model using cross-validation
> set.seed(100)
> rfTune <- train(x = solTrainXtrans, y = solTrainY,
+                 method = "rf",
+                 tuneGrid = mtryGrid,
+                 ntree = 1000,
+                 importance = TRUE,
+                 trControl = ctrl)
Loading required package: randomForest
randomForest 4.6-7
Type rfNews() to see new features/changes/bug fixes.
> rfTune
Random Forest 

951 samples
228 predictors

No pre-processing
Resampling: Cross-Validated (10 fold) 

Summary of sample sizes: 856, 857, 855, 856, 856, 855, ... 

Resampling results across tuning parameters:

  mtry  RMSE   Rsquared  RMSE SD  Rsquared SD
  10    0.705  0.889     0.0665   0.0208     
  34    0.656  0.899     0.063    0.0225     
  58    0.652  0.899     0.0631   0.0237     
  82    0.649  0.899     0.0654   0.0249     
  106   0.651  0.898     0.0693   0.0261     
  131   0.649  0.899     0.0683   0.0265     
  155   0.65   0.898     0.0698   0.0269     
  179   0.65   0.898     0.0701   0.0274     
  203   0.653  0.897     0.069    0.0271     
  228   0.653  0.897     0.0709   0.0277     

RMSE was used to select the optimal model using  the smallest value.
The final value used for the model was mtry = 131. 
> 
> plot(rfTune)
> 
> rfImp <- varImp(rfTune, scale = FALSE)
> rfImp
rf variable importance

  only 20 most important variables shown (out of 228)

                  Overall
MolWeight           44.11
NumCarbon           39.69
SurfaceArea1        37.71
SurfaceArea2        37.48
HydrophilicFactor   32.30
NumHydrogen         30.22
NumRotBonds         23.48
NumAtoms            23.23
NumNonHAtoms        19.94
FP116               19.91
NumMultBonds        17.74
NumBonds            17.68
NumNonHBonds        17.31
FP075               15.87
NumHalogen          14.34
NumOxygen           14.32
NumNitrogen         13.32
FP148               12.67
FP059               12.11
FP092               11.85
> 
> ### Tune the model using the OOB estimates
> ctrlOOB <- trainControl(method = "oob")
> set.seed(100)
> rfTuneOOB <- train(x = solTrainXtrans, y = solTrainY,
+                    method = "rf",
+                    tuneGrid = mtryGrid,
+                    ntree = 1000,
+                    importance = TRUE,
+                    trControl = ctrlOOB)
> rfTuneOOB
Random Forest 

951 samples
228 predictors

No pre-processing
Resampling: Out of Bag Resampling 

Summary of sample sizes:  

Resampling results across tuning parameters:

  mtry  RMSE   Rsquared
  10    0.704  0.882   
  34    0.655  0.897   
  58    0.649  0.899   
  82    0.649  0.899   
  106   0.647  0.9     
  131   0.646  0.9     
  155   0.65   0.899   
  179   0.65   0.899   
  203   0.654  0.898   
  228   0.651  0.899   

RMSE was used to select the optimal model using  the smallest value.
The final value used for the model was mtry = 131. 
> 
> plot(rfTuneOOB)
> 
> ### Tune the conditional inference forests
> set.seed(100)
> condrfTune <- train(x = solTrainXtrans, y = solTrainY,
+                     method = "cforest",
+                     tuneGrid = mtryGrid,
+                     controls = cforest_unbiased(ntree = 1000),
+                     trControl = ctrl)
> condrfTune
Conditional Inference Random Forest 

951 samples
228 predictors

No pre-processing
Resampling: Cross-Validated (10 fold) 

Summary of sample sizes: 856, 857, 855, 856, 856, 855, ... 

Resampling results across tuning parameters:

  mtry  RMSE   Rsquared  RMSE SD  Rsquared SD
  10    0.976  0.813     0.0852   0.0293     
  34    0.844  0.844     0.0644   0.022      
  58    0.823  0.848     0.0561   0.0229     
  82    0.816  0.849     0.0507   0.0245     
  106   0.817  0.847     0.0471   0.027      
  131   0.817  0.846     0.0477   0.0297     
  155   0.821  0.843     0.047    0.031      
  179   0.829  0.84      0.0446   0.0332     
  203   0.835  0.836     0.0496   0.0363     
  228   0.84   0.834     0.0473   0.0366     

RMSE was used to select the optimal model using  the smallest value.
The final value used for the model was mtry = 82. 
> 
> plot(condrfTune)
> 
> set.seed(100)
> condrfTuneOOB <- train(x = solTrainXtrans, y = solTrainY,
+                        method = "cforest",
+                        tuneGrid = mtryGrid,
+                        controls = cforest_unbiased(ntree = 1000),
+                        trControl = trainControl(method = "oob"))
> condrfTuneOOB
Conditional Inference Random Forest 

951 samples
228 predictors

No pre-processing
Resampling: Out of Bag Resampling 

Summary of sample sizes:  

Resampling results across tuning parameters:

  mtry  RMSE   Rsquared
  10    0.888  0.85    
  34    0.736  0.886   
  58    0.71   0.891   
  82    0.7    0.893   
  106   0.694  0.894   
  131   0.696  0.893   
  155   0.703  0.89    
  179   0.703  0.889   
  203   0.711  0.886   
  228   0.707  0.886   

RMSE was used to select the optimal model using  the smallest value.
The final value used for the model was mtry = 106. 
> 
> plot(condrfTuneOOB)
> 
> ################################################################################
> ### Section 8.6 Boosting
> 
> gbmGrid <- expand.grid(interaction.depth = seq(1, 7, by = 2),
+                        n.trees = seq(100, 1000, by = 50),
+                        shrinkage = c(0.01, 0.1))
> set.seed(100)
> gbmTune <- train(x = solTrainXtrans, y = solTrainY,
+                  method = "gbm",
+                  tuneGrid = gbmGrid,
+                  trControl = ctrl,
+                  verbose = FALSE)
Loading required package: gbm
Loaded gbm 2.1
> gbmTune
Stochastic Gradient Boosting 

951 samples
228 predictors

No pre-processing
Resampling: Cross-Validated (10 fold) 

Summary of sample sizes: 856, 857, 855, 856, 856, 855, ... 

Resampling results across tuning parameters:

  shrinkage  interaction.depth  n.trees  RMSE   Rsquared  RMSE SD  Rsquared SD
  0.01       1                  100      1.58   0.639     0.12     0.0707     
  0.01       1                  150      1.44   0.688     0.112    0.0632     
  0.01       1                  200      1.33   0.714     0.106    0.0585     
  0.01       1                  250      1.25   0.734     0.101    0.0541     
  0.01       1                  300      1.18   0.747     0.0963   0.0509     
  0.01       1                  350      1.13   0.76      0.0898   0.0472     
  0.01       1                  400      1.08   0.769     0.0849   0.045      
  0.01       1                  450      1.05   0.778     0.0812   0.0432     
  0.01       1                  500      1.02   0.785     0.078    0.0419     
  0.01       1                  550      0.993  0.793     0.0739   0.0394     
  0.01       1                  600      0.972  0.8       0.0719   0.0381     
  0.01       1                  650      0.951  0.806     0.069    0.0368     
  0.01       1                  700      0.933  0.811     0.0671   0.036      
  0.01       1                  750      0.917  0.816     0.0653   0.035      
  0.01       1                  800      0.903  0.82      0.0647   0.0338     
  0.01       1                  850      0.888  0.825     0.0641   0.0332     
  0.01       1                  900      0.876  0.829     0.0638   0.033      
  0.01       1                  950      0.865  0.832     0.0626   0.0325     
  0.01       1                  1000     0.854  0.835     0.0609   0.0318     
  0.01       3                  100      1.32   0.751     0.0861   0.0489     
  0.01       3                  150      1.15   0.778     0.0752   0.0437     
  0.01       3                  200      1.04   0.8       0.0642   0.0387     
  0.01       3                  250      0.956  0.817     0.0568   0.0354     
  0.01       3                  300      0.899  0.83      0.0531   0.0327     
  0.01       3                  350      0.855  0.841     0.0521   0.0316     
  0.01       3                  400      0.822  0.849     0.0515   0.0303     
  0.01       3                  450      0.797  0.856     0.0512   0.0297     
  0.01       3                  500      0.775  0.862     0.0524   0.0293     
  0.01       3                  550      0.758  0.866     0.0527   0.0291     
  0.01       3                  600      0.743  0.87      0.0535   0.0289     
  0.01       3                  650      0.731  0.874     0.0533   0.0284     
  0.01       3                  700      0.719  0.877     0.0527   0.0276     
  0.01       3                  750      0.709  0.88      0.0533   0.0276     
  0.01       3                  800      0.702  0.882     0.0535   0.0271     
  0.01       3                  850      0.695  0.884     0.0535   0.0268     
  0.01       3                  900      0.689  0.886     0.0535   0.0265     
  0.01       3                  950      0.683  0.887     0.0534   0.0262     
  0.01       3                  1000     0.678  0.889     0.0534   0.026      
  0.01       5                  100      1.23   0.792     0.0771   0.043      
  0.01       5                  150      1.05   0.813     0.0635   0.0361     
  0.01       5                  200      0.94   0.833     0.0548   0.0317     
  0.01       5                  250      0.863  0.847     0.0518   0.0294     
  0.01       5                  300      0.809  0.859     0.0484   0.0274     
  0.01       5                  350      0.771  0.867     0.0489   0.0265     
  0.01       5                  400      0.741  0.874     0.0492   0.0258     
  0.01       5                  450      0.719  0.88      0.0492   0.0252     
  0.01       5                  500      0.702  0.884     0.0502   0.0247     
  0.01       5                  550      0.687  0.888     0.0514   0.0245     
  0.01       5                  600      0.676  0.891     0.0523   0.0243     
  0.01       5                  650      0.667  0.893     0.0523   0.0241     
  0.01       5                  700      0.659  0.896     0.0528   0.0241     
  0.01       5                  750      0.652  0.898     0.0538   0.0238     
  0.01       5                  800      0.646  0.899     0.0543   0.0239     
  0.01       5                  850      0.642  0.9       0.0549   0.0238     
  0.01       5                  900      0.638  0.902     0.0553   0.0237     
  0.01       5                  950      0.634  0.903     0.0554   0.0234     
  0.01       5                  1000     0.63   0.904     0.0553   0.0231     
  0.01       7                  100      1.18   0.816     0.0712   0.0355     
  0.01       7                  150      0.999  0.834     0.0554   0.0324     
  0.01       7                  200      0.885  0.85      0.0469   0.0293     
  0.01       7                  250      0.81   0.864     0.0452   0.0272     
  0.01       7                  300      0.759  0.874     0.0465   0.0259     
  0.01       7                  350      0.724  0.881     0.0476   0.0248     
  0.01       7                  400      0.699  0.887     0.049    0.0241     
  0.01       7                  450      0.681  0.891     0.0515   0.0241     
  0.01       7                  500      0.667  0.894     0.0522   0.024      
  0.01       7                  550      0.656  0.897     0.0525   0.0236     
  0.01       7                  600      0.647  0.9       0.0536   0.0234     
  0.01       7                  650      0.64   0.901     0.0535   0.0231     
  0.01       7                  700      0.634  0.903     0.0537   0.0227     
  0.01       7                  750      0.63   0.904     0.0545   0.0226     
  0.01       7                  800      0.625  0.906     0.0552   0.0226     
  0.01       7                  850      0.621  0.907     0.0546   0.0223     
  0.01       7                  900      0.618  0.908     0.0551   0.0221     
  0.01       7                  950      0.616  0.908     0.0554   0.0222     
  0.01       7                  1000     0.613  0.909     0.0553   0.022      
  0.1        1                  100      0.854  0.832     0.0624   0.0328     
  0.1        1                  150      0.788  0.853     0.0629   0.0296     
  0.1        1                  200      0.755  0.863     0.0582   0.0277     
  0.1        1                  250      0.735  0.87      0.0603   0.0268     
  0.1        1                  300      0.717  0.876     0.0617   0.0275     
  0.1        1                  350      0.707  0.879     0.058    0.0266     
  0.1        1                  400      0.701  0.881     0.0623   0.0281     
  0.1        1                  450      0.694  0.884     0.062    0.028      
  0.1        1                  500      0.687  0.886     0.0623   0.0286     
  0.1        1                  550      0.684  0.887     0.0647   0.0292     
  0.1        1                  600      0.68   0.888     0.0654   0.0288     
  0.1        1                  650      0.677  0.889     0.0642   0.0279     
  0.1        1                  700      0.674  0.89      0.062    0.0269     
  0.1        1                  750      0.671  0.891     0.0646   0.0275     
  0.1        1                  800      0.668  0.892     0.0636   0.0268     
  0.1        1                  850      0.668  0.892     0.0627   0.0262     
  0.1        1                  900      0.665  0.893     0.0643   0.0271     
  0.1        1                  950      0.666  0.893     0.0646   0.0269     
  0.1        1                  1000     0.666  0.893     0.062    0.0256     
  0.1        3                  100      0.685  0.886     0.0589   0.0298     
  0.1        3                  150      0.657  0.895     0.0587   0.0274     
  0.1        3                  200      0.646  0.899     0.0586   0.0262     
  0.1        3                  250      0.628  0.904     0.0565   0.0248     
  0.1        3                  300      0.623  0.906     0.0528   0.023      
  0.1        3                  350      0.62   0.907     0.0495   0.0215     
  0.1        3                  400      0.617  0.908     0.046    0.02       
  0.1        3                  450      0.617  0.908     0.0481   0.0205     
  0.1        3                  500      0.616  0.908     0.0468   0.0199     
  0.1        3                  550      0.614  0.909     0.0467   0.0201     
  0.1        3                  600      0.613  0.909     0.0465   0.0197     
  0.1        3                  650      0.614  0.908     0.0467   0.0203     
  0.1        3                  700      0.615  0.908     0.0473   0.0205     
  0.1        3                  750      0.617  0.908     0.0468   0.0203     
  0.1        3                  800      0.618  0.907     0.0448   0.0199     
  0.1        3                  850      0.617  0.908     0.0451   0.0198     
  0.1        3                  900      0.617  0.907     0.0455   0.0202     
  0.1        3                  950      0.617  0.908     0.0464   0.0198     
  0.1        3                  1000     0.618  0.907     0.0446   0.0192     
  0.1        5                  100      0.645  0.899     0.0497   0.0234     
  0.1        5                  150      0.626  0.905     0.0495   0.0208     
  0.1        5                  200      0.614  0.908     0.0476   0.0202     
  0.1        5                  250      0.61   0.91      0.0461   0.0196     
  0.1        5                  300      0.607  0.911     0.0474   0.0195     
  0.1        5                  350      0.602  0.912     0.0491   0.0187     
  0.1        5                  400      0.601  0.912     0.0479   0.0184     
  0.1        5                  450      0.603  0.912     0.0495   0.0184     
  0.1        5                  500      0.602  0.912     0.0475   0.0183     
  0.1        5                  550      0.602  0.912     0.0493   0.0188     
  0.1        5                  600      0.604  0.912     0.0505   0.0188     
  0.1        5                  650      0.602  0.912     0.0511   0.0194     
  0.1        5                  700      0.602  0.912     0.0509   0.0193     
  0.1        5                  750      0.602  0.912     0.0527   0.0196     
  0.1        5                  800      0.603  0.911     0.0548   0.0201     
  0.1        5                  850      0.605  0.911     0.0536   0.0202     
  0.1        5                  900      0.604  0.911     0.054    0.0198     
  0.1        5                  950      0.604  0.911     0.0547   0.0203     
  0.1        5                  1000     0.605  0.911     0.0537   0.0201     
  0.1        7                  100      0.632  0.903     0.0634   0.0242     
  0.1        7                  150      0.619  0.907     0.0689   0.0242     
  0.1        7                  200      0.611  0.909     0.0696   0.0241     
  0.1        7                  250      0.606  0.91      0.0716   0.0242     
  0.1        7                  300      0.604  0.911     0.0713   0.0237     
  0.1        7                  350      0.603  0.911     0.074    0.0238     
  0.1        7                  400      0.603  0.911     0.0757   0.0241     
  0.1        7                  450      0.603  0.911     0.0779   0.0248     
  0.1        7                  500      0.603  0.911     0.0758   0.0242     
  0.1        7                  550      0.604  0.911     0.0758   0.024      
  0.1        7                  600      0.604  0.911     0.0776   0.0244     
  0.1        7                  650      0.603  0.911     0.0765   0.0241     
  0.1        7                  700      0.605  0.911     0.0763   0.0241     
  0.1        7                  750      0.604  0.911     0.0773   0.0245     
  0.1        7                  800      0.604  0.911     0.0777   0.0246     
  0.1        7                  850      0.605  0.911     0.0771   0.0244     
  0.1        7                  900      0.604  0.911     0.0775   0.0244     
  0.1        7                  950      0.604  0.911     0.0786   0.0247     
  0.1        7                  1000     0.605  0.911     0.078    0.0247     

RMSE was used to select the optimal model using  the smallest value.
The final values used for the model were n.trees = 400, interaction.depth =
 5 and shrinkage = 0.1. 
> 
> plot(gbmTune, auto.key = list(columns = 4, lines = TRUE))
> 
> gbmImp <- varImp(gbmTune, scale = FALSE)
> gbmImp
gbm variable importance

  only 20 most important variables shown (out of 228)

                  Overall
MolWeight         2523.24
NumCarbon         2289.94
SurfaceArea1      1349.29
HydrophilicFactor  854.84
NumNonHAtoms       741.03
SurfaceArea2       684.76
NumAromaticBonds   496.97
NumChlorine        309.43
NumMultBonds       165.03
NumHydrogen        144.31
FP015              118.38
NumOxygen          113.80
FP009              108.07
NumNonHBonds        99.28
NumHalogen          90.16
FP135               87.61
NumRotBonds         86.62
FP059               81.44
NumAtoms            75.73
FP148               69.44
> 
> ################################################################################
> ### Section 8.7 Cubist
> 
> cbGrid <- expand.grid(committees = c(1:10, 20, 50, 75, 100), 
+                       neighbors = c(0, 1, 5, 9))
> 
> set.seed(100)
> cubistTune <- train(solTrainXtrans, solTrainY,
+                     "cubist",
+                     tuneGrid = cbGrid,
+                     trControl = ctrl)
Loading required package: Cubist
Loading required package: reshape2
> cubistTune
Cubist 

951 samples
228 predictors

No pre-processing
Resampling: Cross-Validated (10 fold) 

Summary of sample sizes: 856, 857, 855, 856, 856, 855, ... 

Resampling results across tuning parameters:

  committees  neighbors  RMSE   Rsquared  RMSE SD  Rsquared SD
  1           0          0.706  0.879     0.0587   0.0312     
  1           1          0.735  0.873     0.0688   0.0293     
  1           5          0.649  0.897     0.0732   0.0296     
  1           9          0.644  0.899     0.0685   0.0291     
  2           0          0.66   0.895     0.0547   0.0261     
  2           1          0.692  0.887     0.0633   0.0242     
  2           5          0.615  0.908     0.0607   0.0237     
  2           9          0.606  0.911     0.0619   0.0246     
  3           0          0.641  0.901     0.059    0.0269     
  3           1          0.688  0.887     0.0679   0.0272     
  3           5          0.603  0.911     0.0634   0.0243     
  3           9          0.595  0.914     0.0642   0.025      
  4           0          0.639  0.901     0.0672   0.0277     
  4           1          0.679  0.89      0.077    0.0271     
  4           5          0.604  0.911     0.0727   0.0251     
  4           9          0.596  0.913     0.0715   0.0252     
  5           0          0.637  0.902     0.0662   0.0266     
  5           1          0.676  0.89      0.0793   0.0276     
  5           5          0.602  0.911     0.0713   0.0246     
  5           9          0.594  0.914     0.0718   0.0252     
  6           0          0.629  0.904     0.0668   0.0268     
  6           1          0.667  0.893     0.0783   0.0273     
  6           5          0.594  0.914     0.0681   0.0236     
  6           9          0.587  0.916     0.0688   0.0239     
  7           0          0.624  0.906     0.0656   0.0248     
  7           1          0.667  0.893     0.0764   0.0253     
  7           5          0.593  0.914     0.0667   0.0223     
  7           9          0.585  0.916     0.0674   0.0228     
  8           0          0.623  0.906     0.0689   0.026      
  8           1          0.665  0.894     0.0811   0.0266     
  8           5          0.591  0.915     0.0704   0.0232     
  8           9          0.583  0.917     0.0705   0.0235     
  9           0          0.62   0.907     0.066    0.0246     
  9           1          0.664  0.894     0.0801   0.0264     
  9           5          0.589  0.915     0.0689   0.0224     
  9           9          0.581  0.917     0.0692   0.0229     
  10          0          0.619  0.907     0.0651   0.0253     
  10          1          0.662  0.895     0.0763   0.0256     
  10          5          0.587  0.916     0.0692   0.023      
  10          9          0.579  0.918     0.0689   0.0234     
  20          0          0.608  0.91      0.0585   0.0222     
  20          1          0.659  0.896     0.0676   0.0234     
  20          5          0.58   0.918     0.0658   0.0215     
  20          9          0.572  0.92      0.0654   0.0216     
  50          0          0.6    0.913     0.0546   0.0202     
  50          1          0.651  0.898     0.0684   0.0223     
  50          5          0.574  0.919     0.064    0.0201     
  50          9          0.566  0.922     0.0634   0.0202     
  75          0          0.601  0.913     0.0529   0.0201     
  75          1          0.653  0.898     0.0662   0.0221     
  75          5          0.575  0.919     0.0621   0.0202     
  75          9          0.567  0.921     0.0618   0.0203     
  100         0          0.6    0.913     0.0504   0.0194     
  100         1          0.651  0.898     0.0623   0.0209     
  100         5          0.574  0.92      0.0597   0.0195     
  100         9          0.566  0.922     0.0594   0.0197     

RMSE was used to select the optimal model using  the smallest value.
The final values used for the model were committees = 100 and neighbors = 9. 
> 
> plot(cubistTune, auto.key = list(columns = 4, lines = TRUE))
> 
> cbImp <- varImp(cubistTune, scale = FALSE)
> cbImp
cubist variable importance

  only 20 most important variables shown (out of 228)

                  Overall
NumCarbon            68.5
MolWeight            60.0
NumHydrogen          55.0
SurfaceArea2         55.0
NumOxygen            51.5
SurfaceArea1         51.0
NumBonds             50.5
NumAtoms             49.5
NumNonHBonds         49.0
NumNonHAtoms         48.5
NumMultBonds         45.0
HydrophilicFactor    43.0
NumRotBonds          41.0
NumRings             37.5
NumNitrogen          34.0
NumDblBonds          33.0
NumChlorine          29.5
NumAromaticBonds     29.0
NumHalogen           27.5
FP065                25.0
> 
> ################################################################################
> ### Session Information
> 
> sessionInfo()
R version 3.0.1 (2013-05-16)
Platform: x86_64-apple-darwin10.8.0 (64-bit)

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
 [1] parallel  stats4    grid      splines   stats     graphics  grDevices
 [8] utils     datasets  methods   base     

other attached packages:
 [1] Cubist_0.0.13                   reshape2_1.2.2                 
 [3] gbm_2.1                         randomForest_4.6-7             
 [5] plyr_1.8                        ipred_0.9-1                    
 [7] prodlim_1.3.3                   class_7.3-7                    
 [9] nnet_7.3-6                      doMC_1.3.0                     
[11] iterators_1.0.6                 foreach_1.4.0                  
[13] RWeka_0.4-15                    party_1.0-6                    
[15] vcd_1.2-13                      colorspace_1.2-1               
[17] MASS_7.3-26                     strucchange_1.4-7              
[19] sandwich_2.2-9                  zoo_1.7-9                      
[21] coin_1.0-21                     mvtnorm_0.9-9994               
[23] modeltools_0.2-19               survival_2.37-4                
[25] rpart_4.1-1                     caret_6.0-22                   
[27] ggplot2_0.9.3.1                 lattice_0.20-15                
[29] AppliedPredictiveModeling_1.1-5

loaded via a namespace (and not attached):
 [1] car_2.0-16         codetools_0.2-8    compiler_3.0.1     CORElearn_0.9.41  
 [5] dichromat_2.0-0    digest_0.6.3       gtable_0.1.2       KernSmooth_2.23-10
 [9] labeling_0.1       munsell_0.4        proto_0.3-10       RColorBrewer_1.0-5
[13] rJava_0.9-4        RWekajars_3.7.8-1  scales_0.2.3       stringr_0.6.2     
[17] tools_3.0.1       
> 
> q("no")
> proc.time()
     user    system   elapsed 
21280.849   500.609  6798.887 
